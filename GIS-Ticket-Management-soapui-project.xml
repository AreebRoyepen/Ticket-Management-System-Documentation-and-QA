<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="a9406546-f651-448a-9354-0064a7e2d195" activeEnvironment="Default" name="GIS Ticket Management" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="8a16eac5-db1b-4fca-bcc5-22fecce3a090" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://localhost</con:endpoint></con:endpoints><con:resource name="Register" path="/register" id="780000ac-edc7-4047-8e5f-b1a88afccc9e"><con:settings/><con:parameters/><con:method name="Register" id="393389a9-91a9-4b8f-971e-6e453e4ecef2" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:reg="http://localhost/register">reg:Response</con:element></con:representation><con:request name="registerAdmin" id="bf002f18-73c0-41d6-9da9-466d0001e425" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"name":"soap",
	"surname":"user",
	"email":"areeb.royepen@gmail.com",
	"number":"0724431348",
	"username":"soapadmin",
	"password":"soapadmin",
	"role" : "1",
	"active":true
}</con:request><con:originalUri>http://localhost/register</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="registerCoord" id="dddef578-d25c-4dcc-bcd6-d72cf9ea3bee" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"name":"nabeel",
	"surname":"royepen",
	"email":"coord@gmail.com",
	"number":"0724431348",
	"username":"soapcoord",
	"password":"soapcoord",
	"role" : "2",
	"active":false
	
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="login" path="/login" id="8a502d98-ff86-40b6-a0ef-b0f6de21fb12"><con:settings/><con:parameters/><con:method name="login" id="a261b5f1-5279-4a7a-a675-74fab43c8ad1" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:log="http://localhost/login">log:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:log="http://localhost/login">log:Fault</con:element></con:representation><con:request name="login" id="b9c512bf-d45d-4ef7-bc5b-75e5f1d461f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"username":"soapadmin",
	"password":"soapadmin"
}
</con:request><con:originalUri>http://localhost/login</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="changeUserStatus" path="/changeUserStatus" id="b84afe68-d588-4667-a34c-d31592a20e18"><con:settings/><con:parameters/><con:method name="Method 1" id="74ae42e6-11a1-4d58-b819-ec424a500e27" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="ae3ec29b-5de0-4dea-9f5e-7beccdacf9cc" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"user" : 2,
	"active" : true
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="users" path="/users" id="9d36ef3d-c6ea-46f2-a039-a95264087ba9"><con:settings/><con:parameters/><con:method name="Method 1" id="5124999e-02ed-4ba9-beb7-911da3a5d033" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="76c90356-18c7-4285-932e-642fe557f74e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="roles" path="/roles" id="c09512d0-2b5d-4f38-8eef-101906a1ff74"><con:settings/><con:parameters/><con:method name="Method 1" id="8643d0cc-8550-4971-9066-575fa8a965c5" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="cf70bf0c-49fb-436c-8f94-05962e5a432f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="events" path="/events" id="3da4fcfb-ad15-4080-84b4-332f9b487aa5"><con:settings/><con:parameters/><con:method name="Method 1" id="c6a4d8f5-a2b0-4479-ab83-7b8c1eba1a68" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="a3f5f7d7-90d8-4428-99cd-c07c2a9433ad" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="availableEvents" path="/availableEvents" id="aa3c191d-5c59-4ff4-bb33-93c6559799a2"><con:settings/><con:parameters/><con:method name="Method 1" id="814a4933-9a7b-4951-b0a3-99ba169334cb" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="cdc85260-b321-42bf-80d7-4201bf1ed425" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="unavailableEvents" path="/unavailableEvents" id="8496c6a4-b4e8-4c7c-9eb4-78066e523be6"><con:settings/><con:parameters/><con:method name="Method 1" id="4dede884-de71-418d-82c5-48c61a323f6b" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="253efe8f-32fb-4f54-a857-24021a5a3f3a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="addEvent" path="/addEvent" id="b7f3ae1d-3697-4b41-9b02-d6c5054ccd3a"><con:settings/><con:parameters/><con:method name="Method 1" id="9345ed62-7b1c-4548-8b7d-92bc133d5bdd" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:add="http://localhost/addEvent">add:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:add="http://localhost/addEvent">add:Response</con:element></con:representation><con:request name="Request 1" id="bc31d697-9170-4812-acfb-8a231b07a111" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"name" : "" + testcase.getPropertyValue("eventname") + "",
	"from": 1,
	"to" : 1000,
	"active": true,
	"ticketPrice" : 100
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="eventById" path="/eventById" id="bf8bcb61-3006-48dd-b276-7ff1ce81817d"><con:settings/><con:parameters/><con:method name="Method 1" id="f4c9361e-05fd-449a-8e6a-7886de650fe4" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="2f5c2019-3671-4f19-9bea-16c2b537a16a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost${#Project#baseUrl}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:request></con:method></con:resource><con:resource name="eventByName" path="/eventByName" id="697b914d-313e-4760-a63b-c709511329d8"><con:settings/><con:parameters/><con:method name="Method 1" id="0b1901b0-f5de-47cd-8c27-28c6b2aeff7e" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="2f8a3abf-0e80-4474-8085-aabb607da79a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"name": "" + testcase.getPropertyValue("eventname") + ""	
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="eventLikeName" path="/eventLikeName" id="eb66bb25-bd9f-4358-806d-8630a0b885ae"><con:settings/><con:parameters/><con:method name="Method 1" id="8ae9c5b6-81f3-4271-be8c-74ac09dd2381" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="5005d03e-a431-4cf8-832a-20662658cec7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"name": "Soap"	
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="deleteEvent" path="/deleteEvent" id="9f51f2cf-0563-4fb6-8f75-5e31de7cb546"><con:settings/><con:parameters/><con:resource name="{id}" path="{id}" id="a4ba95f8-55db-400b-b4e1-be336c83aa18"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default></con:parameter></con:parameters><con:method name="Method 1" id="8a06c09b-8921-4fe5-819a-e8d767478b8b" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://localhost/deleteEvent/1">ns:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:ns="http://localhost/deleteEvent/1">ns:Fault</con:element></con:representation><con:request name="Request 1" id="c30ab349-e961-4d7d-b759-64211854d453" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Method 1" id="177e98cf-9377-4134-86ae-793f5ccf56ee" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://localhost/deleteEvent/1">ns:Response</con:element></con:representation><con:request name="Request 1" id="78db1554-d94a-4380-beb3-1f43d0a13b20" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="updateEvent" path="/updateEvent" id="6ead245f-acd9-4c47-a825-ccf5a7b049a3"><con:settings/><con:parameters/><con:resource name="{id}" path="{id}" id="92772032-5a5e-41c2-a0e7-7314ed1e5cc7"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default></con:parameter></con:parameters><con:method name="Method 1" id="aba217d3-8ad2-451b-96c5-3a7cfab1c5be" method="PUT"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:upd="http://localhost/updateEvent">upd:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:upd="http://localhost/updateEvent">upd:Fault</con:element></con:representation><con:request name="Request 1" id="b5b07ff5-8f97-4422-a33f-eb0267b3f291" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Method 1" id="d50b802a-f862-4ad2-a04e-9caa98524586" method="PUT"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404 405</con:status><con:params/><con:element xmlns:upd="http://localhost/updateEvent">upd:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:upd="http://localhost/updateEvent">upd:Response</con:element></con:representation><con:request name="Request 1" id="a248e201-a597-4d40-a4a6-5c3c3e07af6c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
        "ticketPrice": 200,
        "from": 1,
        "to": 1000
    }</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="setActive" id="dff9c7c3-96e9-4db2-a5a1-5df81df1fe4f" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
        "active":"true"
   }</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="allocateTicket" path="/allocateTicket" id="f8929555-b3e5-44eb-b7ee-fc11745dfbc5"><con:settings/><con:parameters/><con:method name="Method 1" id="938b54e2-c796-4f2f-b292-1ded77125d8d" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401 400</con:status><con:params/><con:element xmlns:all="http://localhost/allocateTicket">all:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:all="http://localhost/allocateTicket">all:Response</con:element></con:representation><con:request name="Request 1" id="a5aba0c3-6dc9-45ed-a944-c37f176f38ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"ticketNumber": 1,
	"person" :  "1",
	"event" : "1"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="bulkAllocateTicket" path="/bulkAllocateTicket" id="7bbdeab1-9213-4628-8437-f90cc58444a3"><con:settings/><con:parameters/><con:method name="Method 1" id="e927e836-63c5-4e02-bc75-48484e456ac5" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:bul="http://localhost/bulkAllocateTicket">bul:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:bul="http://localhost/bulkAllocateTicket">bul:Response</con:element></con:representation><con:request name="Request 1" id="ffbd9fc2-0fe0-48a9-a0a9-aa13c1d01708" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"person": 1,
	"event": 1,
	"ticketNumberF": 2,
	"ticketNumberT": 501
	
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="returnTicket" path="/returnTicket" id="85470d0c-5af8-45df-96d2-ed8b30b8d58c"><con:settings/><con:parameters/><con:resource name="{ticket}" path="{eventid}/{ticket}" id="1407eac0-61c9-4120-885f-eafd34a77627"><con:settings/><con:parameters><con:parameter><con:name>eventid</con:name><con:value>eventid</con:value><con:style>TEMPLATE</con:style><con:default>eventid</con:default></con:parameter><con:parameter><con:name>ticket</con:name><con:value>ticket</con:value><con:style>TEMPLATE</con:style><con:default>ticket</con:default></con:parameter></con:parameters><con:method name="Method 1" id="21820be9-21f3-4ca7-ae00-e7f9ec3eef2d" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://localhost/returnTicket/11/1">ns:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="394a2cf3-3e60-4cd8-9c79-358c539085fd" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Method 1" id="b728dcd4-199b-4322-bf5c-9803e6bdbb68" method="DELETE"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401 405</con:status><con:params/><con:element xmlns:ns="http://localhost/returnTicket/11/1">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://localhost/returnTicket/11/1">ns:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="ec099f09-1288-480d-99e7-66a98950e2e5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="bulkReturn" path="/bulkReturn" id="fcc75ed1-cba2-4bfe-959c-e6cb7522eb7f"><con:settings/><con:parameters/><con:method name="Method 1" id="a6a98ca5-6e06-4f79-8753-d33b3bb369aa" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:bul="http://localhost/bulkReturn">bul:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="079536dd-4831-40a9-9131-328399c31a55" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"event": 1,
	"ticketNumberF": 500,
	"ticketNumberT": 501
	
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="tickets" path="/tickets" id="b34a1ea3-d4af-4ab2-b586-389a2d195fb0"><con:settings/><con:parameters/><con:method name="Method 1" id="7a5a1e9d-1481-46cb-b438-a78027ef44ca" method="POST"><con:settings/><con:parameters/><con:request name="empty" id="6f3d3fcd-d368-49fd-bbc1-6e2b135c0053" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="paid" id="5fb51502-3790-44ab-b789-565c7b7f0896" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"paid":true
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="event" id="94f3b762-4f08-45b7-a814-747535f264a9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"event":1
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request><con:request name="paid and event" id="ca910f77-53d6-48e8-b289-7f3ec7f7acc1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"paid":false,
	"event":1
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="unallocated" path="/unallocated" id="bba9b650-4d69-41f6-9235-696c97e21366"><con:settings/><con:parameters/><con:method name="Method 1" id="caebef1c-672b-48af-af77-f21e453015ed" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="78dc0943-c246-452e-8f9b-0b299d3a051b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="allUnallocated" path="/allUnallocated" id="be830b1a-91ea-4afb-a55c-9876eb824fa0"><con:settings/><con:parameters/><con:method name="Method 1" id="ce375357-4a9c-41ea-b658-2e71426ae520" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="0328026a-3dc2-49da-a092-072b6f225fd8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="payment" path="/payment" id="bb4d29d1-c114-4c2e-8ca8-4e7c25040169"><con:settings/><con:parameters/><con:method name="Method 1" id="6c23b173-d508-478f-83ab-5a4cc1a97346" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:pay="http://localhost/payment">pay:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="c4f2f687-57a1-4311-858c-4681cf6b0155" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"eventid":1,
	"ticketNumber":1,
	"amount" : 50
	
	
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="bulkPayment" path="/bulkPayment" id="335649f2-2d2d-41a4-98ad-3aca404f58a5"><con:settings/><con:parameters/><con:method name="Method 1" id="666668b5-e0d3-4f31-a4e4-244a8b9b2f01" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:bul="http://localhost/bulkPayment">bul:Response</con:element></con:representation><con:request name="Request 1" id="295e904e-82ec-4794-9183-7253a94f62a8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"event": 1,
	"ticketNumberF": 2,
	"ticketNumberT": 201,
	"amount": 40100
	
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="payByPerson" path="/payByPerson" id="fac7a862-89bf-491d-84c2-42f4de6d105a"><con:settings/><con:parameters/><con:method name="Method 1" id="5ea32f66-39ef-4bf6-9461-c76c15a320bd" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:pay="http://localhost/payByPerson">pay:Response</con:element></con:representation><con:request name="Request 1" id="deebda3b-de3a-4b14-a382-bc83235943b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"eventid": 1,
	"personid" : 1,
	"amount" : 60100
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="person" path="/person" id="4ad824e1-e5f8-425b-9be3-ebd44abf0a2a"><con:settings/><con:parameters/><con:method name="Method 1" id="430367f0-9128-46ac-8e03-0843d1a0a353" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="f40695a0-2253-4c57-b029-49e55ea932bf" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="addPerson" path="/addPerson" id="a491df77-69af-457b-a5de-ee615e6b9c18"><con:settings/><con:parameters/><con:method name="Method 1" id="c9bdec5d-5098-4f9c-bc45-2c8242022e83" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>401 400</con:status><con:params/><con:element xmlns:add="http://localhost/addEvent">add:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:add="http://localhost/addEvent">add:Response</con:element></con:representation><con:request name="Request 1" id="1be1545e-1a11-4fae-8f56-cab0a8994a46" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"name" : "Shabier",
	"surname" : "Cassiem",
	"number" : "0724431348",
	"email" : "sc@gmail.com"
	
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="personByName" path="/personByName" id="9d35833c-a282-4057-810f-5049a74feb83"><con:settings/><con:parameters/><con:method name="Method 1" id="f0f08563-0940-4732-9deb-84a81a3eae52" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="f0b6dc0f-ec98-46b9-822d-06dac5cd9301" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="personLikeName" path="/personLikeName" id="861ac4ec-ed89-4766-959c-7c680a43f795"><con:settings/><con:parameters/><con:method name="Method 1" id="f198be70-003b-452c-8a87-cee34acf4518" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="a507e829-4453-4b2d-83ea-9343d50a5e17" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="personById" path="/personById" id="2af37df4-a139-4d0b-bd07-b4f2a725627f"><con:settings/><con:parameters/><con:method name="Method 1" id="e028cada-831d-4c26-afa3-73f4817175ab" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="8895188f-b246-448f-98c3-55254a7bc73e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="deletePerson" path="/deletePerson" id="446ea7f7-9732-4690-b80d-a96722f99117"><con:settings/><con:parameters/><con:resource name="{id}" path="{id}" id="8de52776-78c8-47c9-bf16-544b9c1ee88b"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default></con:parameter></con:parameters><con:method name="Method 1" id="9ede6ea9-1daa-420e-89d2-25b280015b3d" method="DELETE"><con:settings/><con:parameters/><con:request name="Request 1" id="0c196a7f-7d72-42ae-a69d-1f0732cefa11" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Method 1" id="6a07aa1e-91a3-40d4-be9e-00e3300080f9" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="280f0399-7608-4864-8bec-4278b37da152" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="updatePerson" path="/updatePerson" id="60702bc4-2677-4a07-9898-30874804a08d"><con:settings/><con:parameters/><con:resource name="{id}" path="{id}" id="4143f8ac-7bcc-4766-b257-7eea74b206fd"><con:settings/><con:parameters><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default></con:parameter></con:parameters><con:method name="Method 1" id="0b6a393f-cdf3-4031-a0d5-bf4a586d3e93" method="PUT"><con:settings/><con:parameters/><con:request name="Request 1" id="07dbc666-dff6-409f-9781-13ffbd49b08c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="Method 1" id="708bca42-ec39-4953-9700-8280ea7c5176" method="PUT"><con:settings/><con:parameters/><con:request name="Request 1" id="ceddad73-15f7-4f69-a417-d0ae8c677888" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
    "name": "Areeb",
    "surname": "Royeppen",
    "number": "0724431348",
    "email": "a@gmail.com"
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="surplus" path="/surplus" id="99f722c2-1120-4a7b-912b-babd48d18d28"><con:settings/><con:parameters/><con:method name="Method 1" id="697c9eae-8d78-44b4-b792-1c2fc4c30072" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="797c2f4c-ec8e-4290-8e5c-9a09a67cf65d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="dashboard" path="/dashboard" id="144346a5-fab6-469b-a6d0-193ce0e17e0e"><con:settings/><con:parameters/><con:method name="Method 1" id="01c2dcfe-91b2-42e2-ae67-34924b958396" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="34184ab0-4add-4e7f-a29d-1b3300715f13" mediaType="application/json"><con:settings/><con:endpoint>http://localhost</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="8ec70097-792d-4900-b875-32b8301222ca" name="Run Me First"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="1d3361b4-0d22-4cf2-af19-ab159d5042ce" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Register and Authenticate" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Setup" id="eefe3852-9dd8-4726-89e2-ff19ff5b39f9"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from user where username = 'soapadmin' " + 
		"and name = 'soap' " ){row ->
		log.info(row)
		sql.execute("delete from user where id = " + row.id)

	}
	
	//insertions
	



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="Register" id="a9a57f9e-248b-442f-8c36-34de1adc7dd8"><con:settings/><con:config service="http://localhost" resourcePath="/register" methodName="Register" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Register" id="289118c0-263c-495e-b93b-68b28702bc10" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request>{
	"name":"soap",
	"surname":"user",
	"email":"areeb.royepen@gmail.com",
	"number":"0724431348",
	"username":"soapadmin",
	"password":"soapadmin",
	"role" : "1",
	"active":true
}</con:request><con:originalUri>http://localhost/register</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="5c6b6912-fc53-4aff-b1aa-b9cf3a9ccf95" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Authenticate" id="3d7f9abe-47d0-4b7a-8ef3-e62c869e70d1"><con:settings/><con:config service="http://localhost" resourcePath="/login" methodName="login" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Authenticate" id="b9c512bf-d45d-4ef7-bc5b-75e5f1d461f4" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request>{
	"username":"soapadmin",
	"password":"soapadmin"
}
</con:request><con:originalUri>http://localhost/login</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fce3607c-3bae-4842-8886-d26ef7c35064" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get Bearer Token" id="4c35d59f-0e88-4c2c-b996-bd8d16e9e6f1"><con:settings/><con:config><script>import groovy.json.JsonSlurper

def project = testRunner.testCase.testSuite.project
def testCase = testRunner.testCase

def jsonSlurper = new JsonSlurper()
def responseMessage = testRunner.testCase.testSteps["Authenticate"].testRequest.response.contentAsString
def json1 = jsonSlurper.parseText(responseMessage)
log.info(json1.token)
project.setPropertyValue("token", "Bearer " +  json1.token)

</script></con:config></con:testStep><con:properties><con:property><con:name>token</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="16268d59-03f0-4809-b2fa-4b142cd1c427" name="Allocate Ticket"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ccd99cd7-e4ab-418a-b2b1-4d0024e8e1fd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="allocateTicketSuccess" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Clean" id="31ea6775-5f97-4eec-8dda-95af5830f613"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where ticket_number = 1 " + 
		"and eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname")+ "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname")+ "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="1177c7d9-9d01-44ce-b88c-28f8dc68942b"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite


def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("eventname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("personname") + "' ,1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="allocateTicket" id="3f47684f-cb2e-42cb-a8b3-ad9e04531c6e"><con:settings/><con:config service="http://localhost" resourcePath="/allocateTicket" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="allocateTicket" id="a5aba0c3-6dc9-45ed-a944-c37f176f38ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"ticketNumber": ${#TestCase#ticketnumber},
	"person" :  ${#TestCase#personID},
	"event" : ${#TestCase#eventID}
}</con:request><con:originalUri>http://localhost/allocateTicket</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fc175491-6698-4b6d-8abb-6b0bbce49452" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate" id="518d299d-66e6-470a-b0a4-f5cc4322bee6"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where ticket_number = 1 " + 
		"and eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->

		if(row.eventid.toString() == testcase.getPropertyValue("eventID") &amp;&amp; row.personid.toString() == testcase.getPropertyValue("personID")
		&amp; row.ticket_number.toString() == testcase.getPropertyValue("ticketnumber")){
			log.info("success")
		}else{
			testRunner.fail("Failure")
		}

	}
	
	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="b146465e-9071-4cac-99da-a81c3fdff3f7"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite


try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where ticket_number = 1 " + 
		"and eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname")+ "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname")+ "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>12</con:value></con:property><con:property><con:name>eventID</con:name><con:value>12</con:value></con:property><con:property><con:name>ticketnumber</con:name><con:value>1</con:value></con:property><con:property><con:name>eventname</con:name><con:value>je9buMwXNFm</con:value></con:property><con:property><con:name>personname</con:name><con:value>je9buMwXNFm</con:value></con:property></con:properties></con:testCase><con:testCase id="e019b3b9-73f8-441b-9662-9df2328b3207" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="allocateTicket - ticket already allocated" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Clean" id="ed4fc590-881f-4209-aef1-77b9738371cd"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where ticket_number = 1 " + 
		"and eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="b0054601-5f4f-459e-9e30-92416eca5dd8"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	sql.execute(
		"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false," + testcase.getPropertyValue("ticketnumber") + " , "+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
	)
	
	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="allocateTicket" id="a2ab5ed0-dc59-42e0-ae9f-635808921bac"><con:settings/><con:config service="http://localhost" resourcePath="/allocateTicket" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="allocateTicket" id="a5aba0c3-6dc9-45ed-a944-c37f176f38ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"ticketNumber": ${#TestCase#ticketnumber},
	"person" :  ${#TestCase#personID},
	"event" : ${#TestCase#eventID}
}</con:request><con:originalUri>http://localhost/allocateTicket</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fc175491-6698-4b6d-8abb-6b0bbce49452" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate" id="eb044e5e-277d-4421-bbd2-f7aba277bcad"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	def x = 0
	sql.eachRow("select * from ticket where ticket_number = 1 " + 
		"and eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->

		x = x + 1

	}

	if(x == 0){
		testRunner.fail("Failure")
	}

	def responseMessage = testRunner.testCase.testSteps["allocateTicket"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)
	if(!json1.message.equalsIgnoreCase("Ticket Already Exists")){
		testRunner.fail("Failure")
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="c6e9ef0b-8102-473b-b485-985f2b5f2bb8"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where ticket_number = 1 " + 
		"and eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>13</con:value></con:property><con:property><con:name>eventID</con:name><con:value>13</con:value></con:property><con:property><con:name>ticketnumber</con:name><con:value>1</con:value></con:property><con:property><con:name>eventname</con:name><con:value>AktmEUDflys</con:value></con:property><con:property><con:name>personname</con:name><con:value>AktmEUDflys</con:value></con:property></con:properties></con:testCase><con:testCase id="8e57f88b-60a9-4a29-a6f5-d66943d4b19e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="allocateTicket - ticket out of range" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Clean" id="b2887902-bb80-4b89-b5df-69b19824ba94"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where ticket_number = " + testcase.getPropertyValue("outofrangevalue") + 
		" and eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="54a61455-47f6-4203-b99a-964a7ddddce4"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "', " +testcase.getPropertyValue("rangeFrom") + "," +testcase.getPropertyValue("rangeTo") + " ,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="allocateTicket" id="08733d46-3f41-40b9-b4b3-504eb1b796bc"><con:settings/><con:config service="http://localhost" resourcePath="/allocateTicket" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="allocateTicket" id="a5aba0c3-6dc9-45ed-a944-c37f176f38ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"ticketNumber": ${#TestCase#outofrangevalue},
	"person" :  ${#TestCase#personID},
	"event" : ${#TestCase#eventID}
}</con:request><con:originalUri>http://localhost/allocateTicket</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fc175491-6698-4b6d-8abb-6b0bbce49452" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate" id="00c741b0-5927-4ba2-9c18-fd89cae7a8ad"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	def x = 0
	sql.eachRow("select * from ticket where ticket_number = " + testcase.getPropertyValue("outofrangevalue") + 
		" and eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->

		x = x + 1

	}

	if(x != 0){
		testRunner.fail("Failure")
	}

	def responseMessage = testRunner.testCase.testSteps["allocateTicket"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)
	if(!json1.message.equalsIgnoreCase("Ticket out of range")){
		testRunner.fail("Failure")
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="a4583b14-0d26-48c5-b410-1b17d859fc80"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where ticket_number = "+ testcase.getPropertyValue("outofrangevalue") + 
		" and eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>14</con:value></con:property><con:property><con:name>eventID</con:name><con:value>14</con:value></con:property><con:property><con:name>ticketnumber</con:name><con:value>1</con:value></con:property><con:property><con:name>rangeFrom</con:name><con:value>1</con:value></con:property><con:property><con:name>rangeTo</con:name><con:value>1000</con:value></con:property><con:property><con:name>outofrangevalue</con:name><con:value>1001</con:value></con:property><con:property><con:name>eventname</con:name><con:value>Ctnehh0L4yR</con:value></con:property><con:property><con:name>personname</con:name><con:value>Ctnehh0L4yR</con:value></con:property></con:properties></con:testCase><con:testCase id="5facef15-b57f-42b8-b25c-23d3ca2b1b34" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="allocateTicket - no person/event" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Clean" id="7f9748ea-5436-43ce-94fc-e67c9b41ac9f"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where ticket_number = " + testcase.getPropertyValue("outofrangevalue") + 
		" and eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") +"' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") +"' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="28a5fae5-487e-4aba-a6b5-9a90876c5976"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") +"','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") +"', " +testcase.getPropertyValue("rangeFrom") + "," +testcase.getPropertyValue("rangeTo") + " ,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
		testcase.setPropertyValue("personIDNOT", (row.id.toInteger() +1 ).toString() )
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
		testcase.setPropertyValue("eventIDNOT", (row.eventid.toInteger() +1 ).toString() )
	}

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="allocateTicket" id="2d902fd8-859a-44ad-976a-d08142a23da9"><con:settings/><con:config service="http://localhost" resourcePath="/allocateTicket" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="allocateTicket" id="a5aba0c3-6dc9-45ed-a944-c37f176f38ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"ticketNumber" : ${#TestCase#ticketnumber},
	"person" :  ${#TestCase#personIDNOT},
	"event" : ${#TestCase#eventID}
}</con:request><con:originalUri>http://localhost/allocateTicket</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fc175491-6698-4b6d-8abb-6b0bbce49452" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate" id="10113cc2-c5d5-4b38-ae62-280a948a88a0"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	def x = 0
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->

		x = x + 1

	}

	if(x != 0){
		testRunner.fail("Failure")
	}

	def responseMessage = testRunner.testCase.testSteps["allocateTicket"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)
	if(!json1.message.equalsIgnoreCase("No such Event or Person")){
		testRunner.fail("Failure")
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="allocateTicket 2" id="331eeb4e-42c4-4460-9b4d-a92a1018d416"><con:settings/><con:config service="http://localhost" resourcePath="/allocateTicket" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="allocateTicket 2" id="a5aba0c3-6dc9-45ed-a944-c37f176f38ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"ticketNumber" : ${#TestCase#ticketnumber},
	"person" :  ${#TestCase#personID},
	"event" : ${#TestCase#eventIDNOT}
}</con:request><con:originalUri>http://localhost/allocateTicket</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fc175491-6698-4b6d-8abb-6b0bbce49452" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate 2" id="efcfc952-a969-4a71-88a3-0b08e239b133"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	def x = 0
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->

		x = x + 1

	}

	if(x != 0){
		testRunner.fail("Failure")
	}

	def responseMessage = testRunner.testCase.testSteps["allocateTicket"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)
	if(!json1.message.equalsIgnoreCase("No such Event or Person")){
		testRunner.fail("Failure")
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="81f5b9ad-5fae-4254-805d-bd2da4a1c3dc"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where ticket_number = "+ testcase.getPropertyValue("outofrangevalue") + 
		" and eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") +"' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") +"' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>15</con:value></con:property><con:property><con:name>eventID</con:name><con:value>15</con:value></con:property><con:property><con:name>ticketnumber</con:name><con:value>1</con:value></con:property><con:property><con:name>rangeFrom</con:name><con:value>1</con:value></con:property><con:property><con:name>rangeTo</con:name><con:value>1000</con:value></con:property><con:property><con:name>outofrangevalue</con:name><con:value>1001</con:value></con:property><con:property><con:name>personIDNOT</con:name><con:value>16</con:value></con:property><con:property><con:name>eventIDNOT</con:name><con:value>16</con:value></con:property><con:property><con:name>eventname</con:name><con:value>LbUEHpyMVbT</con:value></con:property><con:property><con:name>personname</con:name><con:value>LbUEHpyMVbT</con:value></con:property></con:properties></con:testCase><con:testCase id="4d110086-1c72-4b68-bf15-5860abd372e4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="allocateTicket - missing json body variables" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Clean" id="369ce6ca-6f55-492a-9bd6-857d4d9fc115"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where ticket_number = " + testcase.getPropertyValue("outofrangevalue") + 
		" and eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" +testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" +testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="85d81ec5-1a63-4de0-8c92-6b5ca322d93c"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" +testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" +testcase.getPropertyValue("eventname") + "', " +testcase.getPropertyValue("rangeFrom") + "," +testcase.getPropertyValue("rangeTo") + " ,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="allocateTicket" id="e9882d7f-de9f-4aa5-b6e7-47ccb089124c"><con:settings/><con:config service="http://localhost" resourcePath="/allocateTicket" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="allocateTicket" id="a5aba0c3-6dc9-45ed-a944-c37f176f38ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"person" :  ${#TestCase#personID},
	"event" : ${#TestCase#eventID}
}</con:request><con:originalUri>http://localhost/allocateTicket</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fc175491-6698-4b6d-8abb-6b0bbce49452" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate" id="fa5b2117-afb3-4041-a135-93b47b081b49"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	def x = 0
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->

		x = x + 1

	}

	if(x != 0){
		testRunner.fail("Failure")
	}

	def responseMessage = testRunner.testCase.testSteps["allocateTicket"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)
	if(!json1.message.equalsIgnoreCase("Invalid Request Body")){
		testRunner.fail("Failure")
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="allocateTicket2" id="5beaa5b5-56aa-4e05-8e49-28e670765a2f"><con:settings/><con:config service="http://localhost" resourcePath="/allocateTicket" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="allocateTicket2" id="a5aba0c3-6dc9-45ed-a944-c37f176f38ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"ticketNumber": ${#TestCase#outofrangevalue},
	"event" : ${#TestCase#eventID}
}</con:request><con:originalUri>http://localhost/allocateTicket</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fc175491-6698-4b6d-8abb-6b0bbce49452" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate 2" id="8a9d8bd3-2bb3-48ee-adf7-f2e9e27d7d84"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	def x = 0
	sql.eachRow("select * from ticket where ticket_number = " + testcase.getPropertyValue("outofrangevalue") + 
		" and eventid = " + testcase.getPropertyValue("eventID")
		){row ->

		x = x + 1

	}

	if(x != 0){
		testRunner.fail("Failure")
	}

	def responseMessage = testRunner.testCase.testSteps["allocateTicket2"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)
	if(!json1.message.equalsIgnoreCase("Invalid Request Body")){
		testRunner.fail("Failure")
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="allocateTicket3" id="010ad1f3-ba65-4c0c-b120-24e4ae7bde7c"><con:settings/><con:config service="http://localhost" resourcePath="/allocateTicket" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="allocateTicket3" id="a5aba0c3-6dc9-45ed-a944-c37f176f38ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"ticketNumber": ${#TestCase#outofrangevalue},
	"person" :  ${#TestCase#personID}
}</con:request><con:originalUri>http://localhost/allocateTicket</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fc175491-6698-4b6d-8abb-6b0bbce49452" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate 3" id="0e1e2987-1fe9-44f5-9827-d0be3e00a843"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	def x = 0
	sql.eachRow("select * from ticket where ticket_number = " + testcase.getPropertyValue("outofrangevalue") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->

		x = x + 1

	}

	if(x != 0){
		testRunner.fail("Failure")
	}

	def responseMessage = testRunner.testCase.testSteps["allocateTicket3"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)
	if(!json1.message.equalsIgnoreCase("Invalid Request Body")){
		testRunner.fail("Failure")
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="eb5619d4-ae70-4202-b1a4-fbf3fd05e005"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where ticket_number = "+ testcase.getPropertyValue("outofrangevalue") + 
		" and eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" +testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" +testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>16</con:value></con:property><con:property><con:name>eventID</con:name><con:value>16</con:value></con:property><con:property><con:name>ticketnumber</con:name><con:value>1</con:value></con:property><con:property><con:name>rangeFrom</con:name><con:value>1</con:value></con:property><con:property><con:name>rangeTo</con:name><con:value>1000</con:value></con:property><con:property><con:name>outofrangevalue</con:name><con:value>1001</con:value></con:property><con:property><con:name>eventname</con:name><con:value>ikNQ_ECB99A</con:value></con:property><con:property><con:name>personname</con:name><con:value>ikNQ_ECB99A</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="5d643b1c-345a-43ec-9ed0-f11eccd1f664" name="Bulk Allocate"><con:description>TestSuite generated for REST Service [http://localhost]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="909291d0-e4b4-4788-9d72-e64c3841d1ee" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="bulkAllocateTicket-Success" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="c87a8b07-6e61-4d74-85ec-1791cf549ee3"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname" ) + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname" ) + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="9ce14863-b7e7-4ae2-82a3-56c6bd4b1a9a"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="bulk allocate" id="4fb1a860-33a7-40ab-b528-1d786b2e3390"><con:settings/><con:config service="http://localhost" resourcePath="/bulkAllocateTicket" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="bulk allocate" id="ffbd9fc2-0fe0-48a9-a0a9-aa13c1d01708" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"person": ${#TestCase#personID},
	"event": ${#TestCase#eventID},
	"ticketNumberF": ${#TestCase#ticketF},
	"ticketNumberT": ${#TestCase#ticketT}
	
}</con:request><con:originalUri>http://localhost/bulkAllocateTicket</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a91855de-3c0d-4648-a691-f021c029ebef" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="f5ec1c52-b313-4bf1-ad22-cbed1eca1980"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	def x = 0
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->

		if(row.eventid.toString() == testcase.getPropertyValue("eventID") &amp;&amp; row.personid.toString() == testcase.getPropertyValue("personID")
		){
			x = x + 1
			log.info("success")
		}else{
			testRunner.fail("Failure")
		}

	}

	log.info(x)
	if(x == (	testcase.getPropertyValue("ticketT").toInteger() - testcase.getPropertyValue("ticketF").toInteger() + 1)		){
		log.info("success")
	}else{
		testRunner.fail("Failure")
	}

	
	
	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="cc1f5b05-b282-4717-b828-ddbb579db380"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname" ) + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname" ) + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>17</con:value></con:property><con:property><con:name>eventID</con:name><con:value>17</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>LWZytDZJWh1</con:value></con:property><con:property><con:name>personname</con:name><con:value>LWZytDZJWh1</con:value></con:property></con:properties></con:testCase><con:testCase id="797496db-508b-49c8-9e5d-976520415bdd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="bulkallocateTicket - ticket already allocated" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Clean" id="4071117d-4c07-43c0-b7a6-6572a58b5623"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="239c77fd-dc7c-4c5f-b8df-25807154a9a5"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	sql.execute(
		"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false," + testcase.getPropertyValue("ticketF") + " , "+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
	)
	
	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="allocateTicket" id="07090433-386d-4d34-9210-69ac998ba33f"><con:settings/><con:config service="http://localhost" resourcePath="/bulkAllocateTicket" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="allocateTicket" id="a5aba0c3-6dc9-45ed-a944-c37f176f38ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"ticketNumberF": ${#TestCase#ticketF},
	"ticketNumberT": ${#TestCase#ticketT},
	"person" :  ${#TestCase#personID},
	"event" : ${#TestCase#eventID}
}</con:request><con:originalUri>http://localhost/allocateTicket</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fc175491-6698-4b6d-8abb-6b0bbce49452" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate" id="40331ee9-2077-413f-ab21-ec3e0da85f24"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	def x = 0
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->

		x = x + 1

	}

	if(x == 0){
		testRunner.fail("Failure")
	}

	def responseMessage = testRunner.testCase.testSteps["allocateTicket"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)
	if(!json1.message.equalsIgnoreCase("Ticket in range already Exists")){
		testRunner.fail("Failure")
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="da6af7f4-acb9-4824-978c-1713ac062f6a"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>18</con:value></con:property><con:property><con:name>eventID</con:name><con:value>18</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>cvo9XFc5QCS</con:value></con:property><con:property><con:name>personname</con:name><con:value>cvo9XFc5QCS</con:value></con:property></con:properties></con:testCase><con:testCase id="b064572d-de69-453e-87bd-45894c578695" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="bulkallocateTicket - ticket range invalid" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Clean" id="529fcefc-1b82-473b-8f13-65ae3ddf12ff"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="2fa2e02d-ebf4-4eb4-8be2-48456e9c3f80"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}
	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="allocateTicket" id="1d908319-5145-46c6-9c71-c68e13e7ddda"><con:settings/><con:config service="http://localhost" resourcePath="/bulkAllocateTicket" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="allocateTicket" id="a5aba0c3-6dc9-45ed-a944-c37f176f38ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"ticketNumberF": ${#TestCase#ticketT},
	"ticketNumberT": ${#TestCase#ticketF},
	"person" :  ${#TestCase#personID},
	"event" : ${#TestCase#eventID}
}</con:request><con:originalUri>http://localhost/allocateTicket</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fc175491-6698-4b6d-8abb-6b0bbce49452" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate" id="f3a5ba59-6dea-4c8a-93e6-10b1ecdb62b1"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	def x = 0
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->

		x = x + 1

	}

	if(x != 0){
		testRunner.fail("Failure")
	}

	def responseMessage = testRunner.testCase.testSteps["allocateTicket"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)
	if(!json1.message.equalsIgnoreCase("Ticket range invalid")){
		testRunner.fail("Failure")
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="8c67b078-594b-47b7-8808-b55e0a52a126"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>19</con:value></con:property><con:property><con:name>eventID</con:name><con:value>19</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>kw9SYW9y7mz</con:value></con:property><con:property><con:name>personname</con:name><con:value>kw9SYW9y7mz</con:value></con:property></con:properties></con:testCase><con:testCase id="0ca1e603-56b9-49ce-a2fc-b5cf8c5b68c6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="bulkallocateTicket - ticket in range not exist" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Clean" id="f064f1d3-221d-40ec-b11e-7dfab07e1b05"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="d09b5fbe-f906-471d-90d4-e650801aa23a"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,10,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}
	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="allocateTicket" id="0ce586f1-c337-4a65-a032-c80bc8d9a4aa"><con:settings/><con:config service="http://localhost" resourcePath="/bulkAllocateTicket" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="allocateTicket" id="a5aba0c3-6dc9-45ed-a944-c37f176f38ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"ticketNumberF": ${#TestCase#ticketF},
	"ticketNumberT": ${#TestCase#ticketTNotExist},
	"person" :  ${#TestCase#personID},
	"event" : ${#TestCase#eventID}
}</con:request><con:originalUri>http://localhost/allocateTicket</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fc175491-6698-4b6d-8abb-6b0bbce49452" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate" id="8286d912-eb78-4c01-bce0-c9b5e9b509dd"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	def x = 0
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->

		x = x + 1

	}

	if(x != 0){
		testRunner.fail("Failure")
	}

	def responseMessage = testRunner.testCase.testSteps["allocateTicket"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)
	if(!json1.message.equalsIgnoreCase("Ticket in your range does not exist")){
		testRunner.fail("Failure")
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="77da0c4d-8793-4ad3-89f2-92486f9a6f72"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>20</con:value></con:property><con:property><con:name>eventID</con:name><con:value>20</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>ticketTNotExist</con:name><con:value>11</con:value></con:property><con:property><con:name>eventname</con:name><con:value>Na1mMD29Sd9</con:value></con:property><con:property><con:name>personname</con:name><con:value>Na1mMD29Sd9</con:value></con:property></con:properties></con:testCase><con:testCase id="b6df3472-ae58-4ef3-9bcd-672c8f3eeefc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="bulkallocateTicket - no such person/event" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Clean" id="60b93dea-a411-4b4c-8540-670daa256ec9"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="1c177b38-fcda-4f85-854d-9c5c2181ba5c"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)
try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,10,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
		testcase.setPropertyValue("personIDNot", (row.id.toInteger() + 1).toString() )
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
		testcase.setPropertyValue("eventIDNot", (row.eventid.toInteger() + 1).toString() )
	}
	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="allocateTicket" id="6c60ce27-75c9-4709-8b2b-d94af401da3d"><con:settings/><con:config service="http://localhost" resourcePath="/bulkAllocateTicket" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="allocateTicket" id="a5aba0c3-6dc9-45ed-a944-c37f176f38ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"ticketNumberF": ${#TestCase#ticketF},
	"ticketNumberT": ${#TestCase#ticketT},
	"person" :  ${#TestCase#personIDNot},
	"event" : ${#TestCase#eventID}
}</con:request><con:originalUri>http://localhost/allocateTicket</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fc175491-6698-4b6d-8abb-6b0bbce49452" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate" id="096815de-4969-475b-8112-cd1f7a424a8f"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	def x = 0
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->

		x = x + 1

	}

	if(x != 0){
		testRunner.fail("Failure")
	}

	def responseMessage = testRunner.testCase.testSteps["allocateTicket"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)
	if(!json1.message.equalsIgnoreCase("No such Event or Person")){
		testRunner.fail("Failure")
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="allocateTicket2" id="55226e55-0554-4a95-a54f-7a2d8699a221"><con:settings/><con:config service="http://localhost" resourcePath="/bulkAllocateTicket" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="allocateTicket2" id="a5aba0c3-6dc9-45ed-a944-c37f176f38ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"ticketNumberF": ${#TestCase#ticketF},
	"ticketNumberT": ${#TestCase#ticketT},
	"person" :  ${#TestCase#personID},
	"event" : ${#TestCase#eventIDNot}
}</con:request><con:originalUri>http://localhost/allocateTicket</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fc175491-6698-4b6d-8abb-6b0bbce49452" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate 2" id="4ef93fe8-d558-4f4e-aaf5-ae35af65b253"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	def x = 0
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->

		x = x + 1

	}

	if(x != 0){
		testRunner.fail("Failure")
	}

	def responseMessage = testRunner.testCase.testSteps["allocateTicket2"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)
	if(!json1.message.equalsIgnoreCase("No such Event or Person")){
		testRunner.fail("Failure")
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="ca315dc5-d1f9-4729-ac73-7035b3ec2069"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>21</con:value></con:property><con:property><con:name>eventID</con:name><con:value>21</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>ticketTNotExist</con:name><con:value>11</con:value></con:property><con:property><con:name>personIDNot</con:name><con:value>22</con:value></con:property><con:property><con:name>eventIDNot</con:name><con:value>22</con:value></con:property><con:property><con:name>eventname</con:name><con:value>dAQi8ymw8Qu</con:value></con:property><con:property><con:name>personname</con:name><con:value>dAQi8ymw8Qu</con:value></con:property></con:properties></con:testCase><con:testCase id="7bdbaa25-c273-42fb-8c01-ee5dcfa65804" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="bulkallocateTicket - incomplete body" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Clean" id="7861af75-d59a-4d91-bb25-fb6b7ec71b34"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="86748e6e-0be9-4e63-a2d6-26acd9d08bb2"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,10,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
		testcase.setPropertyValue("personIDNot", (row.id.toInteger() + 1).toString() )
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
		testcase.setPropertyValue("eventIDNot", (row.eventid.toInteger() + 1).toString() )
	}
	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="allocateTicket" id="426e2ab9-e3f2-4596-8568-8029b4acbc23"><con:settings/><con:config service="http://localhost" resourcePath="/bulkAllocateTicket" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="allocateTicket" id="a5aba0c3-6dc9-45ed-a944-c37f176f38ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"ticketNumberT": ${#TestCase#ticketT},
	"person" :  ${#TestCase#personID},
	"event" : ${#TestCase#eventID}
}</con:request><con:originalUri>http://localhost/allocateTicket</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fc175491-6698-4b6d-8abb-6b0bbce49452" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate" id="9f8920dc-42d9-48ed-b988-99f5c1a2fe8b"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	def x = 0
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->

		x = x + 1

	}

	if(x != 0){
		testRunner.fail("Failure")
	}

	def responseMessage = testRunner.testCase.testSteps["allocateTicket"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)
	if(!json1.message.equalsIgnoreCase("Invalid Request Body")){
		testRunner.fail("Failure")
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="allocateTicket2" id="64e7e740-e27b-4605-a762-3ad8fc1b112c"><con:settings/><con:config service="http://localhost" resourcePath="/bulkAllocateTicket" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="allocateTicket2" id="a5aba0c3-6dc9-45ed-a944-c37f176f38ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"ticketNumberF": ${#TestCase#ticketF},
	"person" :  ${#TestCase#personID},
	"event" : ${#TestCase#eventID}
}</con:request><con:originalUri>http://localhost/allocateTicket</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fc175491-6698-4b6d-8abb-6b0bbce49452" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Copy of Validate" id="e73bfed3-e23d-4980-883f-302549ca97e1"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	def x = 0
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->

		x = x + 1

	}

	if(x != 0){
		testRunner.fail("Failure")
	}

	def responseMessage = testRunner.testCase.testSteps["allocateTicket2"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)
	if(!json1.message.equalsIgnoreCase("Invalid Request Body")){
		testRunner.fail("Failure")
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="allocateTicket3" id="53eb49fb-e184-4685-b683-21f515120be1"><con:settings/><con:config service="http://localhost" resourcePath="/bulkAllocateTicket" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="allocateTicket3" id="a5aba0c3-6dc9-45ed-a944-c37f176f38ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"ticketNumberT": ${#TestCase#ticketT},
	"ticketNumberF": ${#TestCase#ticketF},
	"event" : ${#TestCase#eventID}
}</con:request><con:originalUri>http://localhost/allocateTicket</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fc175491-6698-4b6d-8abb-6b0bbce49452" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate3" id="43e7971d-3888-4b7b-bbc1-12587d338ff1"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	def x = 0
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->

		x = x + 1

	}

	if(x != 0){
		testRunner.fail("Failure")
	}

	def responseMessage = testRunner.testCase.testSteps["allocateTicket3"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)
	if(!json1.message.equalsIgnoreCase("Invalid Request Body")){
		testRunner.fail("Failure")
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="allocateTicket4" id="7184b3b2-deb5-45a6-9fe8-3f4f7d04bbe2"><con:settings/><con:config service="http://localhost" resourcePath="/bulkAllocateTicket" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="allocateTicket4" id="a5aba0c3-6dc9-45ed-a944-c37f176f38ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"ticketNumberT": ${#TestCase#ticketT},
	"ticketNumberF": ${#TestCase#ticketF},
	"person" : ${#TestCase#personID}
}</con:request><con:originalUri>http://localhost/allocateTicket</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fc175491-6698-4b6d-8abb-6b0bbce49452" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Validate4" id="71c0673a-da44-417c-909b-143068530060"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	def x = 0
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->

		x = x + 1

	}

	if(x != 0){
		testRunner.fail("Failure")
	}

	def responseMessage = testRunner.testCase.testSteps["allocateTicket4"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)
	if(!json1.message.equalsIgnoreCase("Invalid Request Body")){
		testRunner.fail("Failure")
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="66a7310d-5937-471c-a43b-ce74cdca677d"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>22</con:value></con:property><con:property><con:name>eventID</con:name><con:value>22</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>ticketTNotExist</con:name><con:value>11</con:value></con:property><con:property><con:name>personIDNot</con:name><con:value>23</con:value></con:property><con:property><con:name>eventIDNot</con:name><con:value>23</con:value></con:property><con:property><con:name>eventname</con:name><con:value>VcNUVIxnHeV</con:value></con:property><con:property><con:name>personname</con:name><con:value>VcNUVIxnHeV</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="cefd2cd5-f91c-42af-aa70-dbccaf101b7c" name="Return Ticket"><con:description>TestSuite generated for REST Service [http://localhost]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="5e90b38b-e208-4861-9996-3ca306cb8ef8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="return Ticket - Success" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="4e290841-c856-4559-9785-a10093b153fd"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="96ce7700-2082-47f5-808b-f501d2aa8153"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	sql.execute(
		"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,1,"+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
	)
//	sql.execute(
//		"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,2,"+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID")+")"
//	)
//	sql.execute(
//		"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,3,"+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
//	)
//	sql.execute( 
//		"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,4,"+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
//	)
//	sql.execute(
//		"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,5,"+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
//	)
	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="return" id="b71139d9-3bcf-4480-8f59-3eaa9ede53ef"><con:settings/><con:config service="http://localhost" resourcePath="/returnTicket/{eventid}/{ticket}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="return" id="ec099f09-1288-480d-99e7-66a98950e2e5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request/><con:originalUri>http://localhost/returnTicket/11/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d873437f-e442-42b4-9c14-4e228de04e36" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="eventid" value="${#TestCase#eventID}"/>
  <con:entry key="ticket" value="${#TestCase#ticketF}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="251358e2-2b03-4239-8c86-3949715f881f"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->

		testRunner.fail("Failure")
	}
	
	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="2c511acb-8f37-4b4f-9b84-eb04a4f9d57f"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>23</con:value></con:property><con:property><con:name>eventID</con:name><con:value>23</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>pAtFlF76mLa</con:value></con:property><con:property><con:name>personname</con:name><con:value>pAtFlF76mLa</con:value></con:property></con:properties></con:testCase><con:testCase id="00914aa8-ec7a-4b61-b03a-65f7ab4e38ce" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="return Ticket - invalid ticket number or event id" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="a59c1458-9852-4174-9f42-ae7b9416124a"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	
	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="2e19aaf3-f5f1-41f8-b472-2f3441965838"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	sql.execute(
		"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,1,"+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID")+")"
	)
//	sql.execute(
//		"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,3,"+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
//	)
//	sql.execute( 
//		"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,4,"+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
//	)
//	sql.execute(
//		"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,5,"+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
//	)
	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="return" id="51946811-cc31-4ed1-a8ad-245cb401f8ca"><con:settings/><con:config service="http://localhost" resourcePath="/returnTicket/{eventid}/{ticket}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="return" id="ec099f09-1288-480d-99e7-66a98950e2e5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request/><con:originalUri>http://localhost/returnTicket/11/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d873437f-e442-42b4-9c14-4e228de04e36" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="eventid" value="${#TestCase#eventID}"/>
  <con:entry key="ticket" value="${#TestCase#ticketF}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="54e67ca3-dfc4-4e7d-885b-99f5491bd644"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	def x =0
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->
		x = x + 1
	}

	if(x==0){
		testRunner.fail("Failure")
	}

	def responseMessage = testRunner.testCase.testSteps["return"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)
	if(json1.message != "No such Ticket or Event"){
		testRunner.fail("Failure")
	}
	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="c6338172-6dae-4b4f-a173-5dae38e43364"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	
	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>24</con:value></con:property><con:property><con:name>eventID</con:name><con:value>24</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>2</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>Uu01QT8b5dM</con:value></con:property><con:property><con:name>personname</con:name><con:value>Uu01QT8b5dM</con:value></con:property></con:properties></con:testCase><con:testCase id="663a8d1e-8650-413c-8e9e-88ee0ebb3fc6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="return Ticket - Surplus" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="45ecdeb0-ec08-41d2-956a-14c953038dcc"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}

	sql.eachRow("select * from surplus where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from surplus where id = " + row.id)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="01db84c2-9dd9-4fb6-87e7-5d591d71884f"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	testcase.setPropertyValue("amount", "100.00")
	sql.execute(
		"insert into ticket (amount, paid, ticket_number,eventid,personid) values ( " + testcase.getPropertyValue("amount") +" ,false,1,"+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
	)
//	sql.execute(
//		"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,2,"+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID")+")"
//	)
//	sql.execute(
//		"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,3,"+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
//	)
//	sql.execute( 
//		"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,4,"+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
//	)
//	sql.execute(
//		"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,5,"+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
//	)
	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="return" id="2866ce22-7092-4edf-9e95-5b881d77ac22"><con:settings/><con:config service="http://localhost" resourcePath="/returnTicket/{eventid}/{ticket}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="return" id="ec099f09-1288-480d-99e7-66a98950e2e5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request/><con:originalUri>http://localhost/returnTicket/11/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d873437f-e442-42b4-9c14-4e228de04e36" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="eventid" value="${#TestCase#eventID}"/>
  <con:entry key="ticket" value="${#TestCase#ticketF}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="43ae6250-015e-446e-ae45-1879fbf54851"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->

		testRunner.fail("Failure")
	}

	sql.eachRow("select * from surplus where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->
		if(row.amount.toString() !=testcase.getPropertyValue("amount") ){
			testRunner.fail("Failure")
		}
	}
	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="8d3a08e6-8268-4d46-99a9-788d86d0fdc4"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from surplus where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from surplus where id = " + row.id)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>25</con:value></con:property><con:property><con:name>eventID</con:name><con:value>25</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>amount</con:name><con:value>100.00</con:value></con:property><con:property><con:name>eventname</con:name><con:value>iCa4yhk6ne6</con:value></con:property><con:property><con:name>personname</con:name><con:value>iCa4yhk6ne6</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="b5804d30-3089-45ae-a985-ca694326f526" name="bulk return"><con:description>TestSuite generated for REST Service [http://localhost]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="d212b975-73b5-47cf-94ff-6e5592fbbf15" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="bulk return success" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="14ed92d6-da07-4afc-8d99-1a394791559d"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="20fbb826-020a-4f76-98ed-3700772c9c43"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	for(int i =testcase.getPropertyValue("ticketF").toInteger(); i &lt;= testcase.getPropertyValue("ticketT").toInteger(); i++){

		sql.execute(
			"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,"+i+","+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
		)
			
	}

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="bulk return" id="a52dc565-a623-4d62-95ef-5f57fc1c6724"><con:settings/><con:config service="http://localhost" resourcePath="/bulkReturn" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="bulk return" id="079536dd-4831-40a9-9131-328399c31a55" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"event": ${#TestCase#eventID},
	"ticketNumberF": ${#TestCase#ticketF},
	"ticketNumberT": ${#TestCase#ticketT}
	
}</con:request><con:originalUri>http://localhost/bulkReturn</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="67c9a1a2-15b5-4c5f-8a83-4643771a2e97" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="09e02d45-9b48-439c-b066-40ab15fc7120"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->

		testRunner.fail("Failure")
	}
	
	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="c6fd047b-4b38-43bf-97c0-38f7ec851f3c"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>26</con:value></con:property><con:property><con:name>eventID</con:name><con:value>26</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>5</con:value></con:property><con:property><con:name>eventname</con:name><con:value>UiP6v5HXZ9r</con:value></con:property><con:property><con:name>personname</con:name><con:value>UiP6v5HXZ9r</con:value></con:property></con:properties></con:testCase><con:testCase id="c05a8147-938d-4def-b945-e4be37edf447" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Bulk eturn - no such Event" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="d2581afb-3693-425f-b3e3-f424e0526ad8"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="f193b33e-ef7b-4bcf-acb6-ef544d89f4f6"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
		testcase.setPropertyValue("eventIDNot", (row.eventid.toInteger() + 1) .toString())
	}

	for(int i =testcase.getPropertyValue("ticketF").toInteger(); i &lt;= testcase.getPropertyValue("ticketT").toInteger(); i++){

		sql.execute(
			"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,"+i+","+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
		)
			
	}

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="bulk return" id="9a11c66b-1872-4d93-a9f6-91b6681c68ef"><con:settings/><con:config service="http://localhost" resourcePath="/bulkReturn" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="bulk return" id="079536dd-4831-40a9-9131-328399c31a55" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"event": ${#TestCase#eventIDNot},
	"ticketNumberF": ${#TestCase#ticketT},
	"ticketNumberT": ${#TestCase#ticketF}
	
}</con:request><con:originalUri>http://localhost/bulkReturn</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="67c9a1a2-15b5-4c5f-8a83-4643771a2e97" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="6d51a47d-8b33-4604-99bb-eee376283b4b"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	def x = 0;
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->
		x = x +1
		
	}

	if(x != testcase.getPropertyValue("ticketT").toInteger() - testcase.getPropertyValue("ticketF").toInteger()  +1){
		testRunner.fail("Failure")
	}
	sql.execute("commit;")

	def responseMessage = testRunner.testCase.testSteps["bulk return"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)
	if(json1.message != "No such Event"){
		testRunner.fail("Failure")
	}
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="4d1e30e7-0530-42e6-b0bb-1ebf533d673f"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>27</con:value></con:property><con:property><con:name>eventID</con:name><con:value>27</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>5</con:value></con:property><con:property><con:name>eventIDNot</con:name><con:value>28</con:value></con:property><con:property><con:name>eventname</con:name><con:value>SVFV7GjRiVi</con:value></con:property><con:property><con:name>personname</con:name><con:value>SVFV7GjRiVi</con:value></con:property></con:properties></con:testCase><con:testCase id="0eae0426-392e-45cc-bd73-dd2390b00f8d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="bulk return - invalid json body" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="f92f6b0f-ad88-4fa4-aefc-38cfee5f11af"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="23ae6f0f-d4c8-47b6-b85d-fb16ac4d5a75"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	for(int i =testcase.getPropertyValue("ticketF").toInteger(); i &lt;= testcase.getPropertyValue("ticketT").toInteger(); i++){

		sql.execute(
			"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,"+i+","+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
		)
			
	}

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="bulk return" id="f3b545b4-1262-4e5d-b0da-d24eff4a69b3"><con:settings/><con:config service="http://localhost" resourcePath="/bulkReturn" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="bulk return" id="079536dd-4831-40a9-9131-328399c31a55" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"event": ${#TestCase#eventID},
	"ticketNumberT": ${#TestCase#ticketT}
	
}</con:request><con:originalUri>http://localhost/bulkReturn</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="67c9a1a2-15b5-4c5f-8a83-4643771a2e97" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="f4a1eeb6-a514-4c73-95a6-fd9edaf57f45"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	def x = 0;
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->
		x = x +1
		
	}

	if(x != testcase.getPropertyValue("ticketT").toInteger() - testcase.getPropertyValue("ticketF").toInteger()  +1){
		testRunner.fail("Failure")
	}
	sql.execute("commit;")

	def responseMessage = testRunner.testCase.testSteps["bulk return"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)
	if(json1.message != "Invalid Request Body"){
		testRunner.fail("Failure")
	}
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="d0acbe14-e4d1-4a41-8483-f0d78e97502a"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>28</con:value></con:property><con:property><con:name>eventID</con:name><con:value>28</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>5</con:value></con:property><con:property><con:name>eventname</con:name><con:value>0z5X7AfwdrW</con:value></con:property><con:property><con:name>personname</con:name><con:value>0z5X7AfwdrW</con:value></con:property></con:properties></con:testCase><con:testCase id="a6da7917-edb3-4ee5-9b90-b012827fdb79" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="bulk return - invalid range" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="3e22a633-ce40-402a-b337-5573d71f025e"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="44a2ce2b-0b51-495a-b9e8-382dbf6c4611"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)
try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	for(int i =testcase.getPropertyValue("ticketF").toInteger(); i &lt;= testcase.getPropertyValue("ticketT").toInteger(); i++){

		sql.execute(
			"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,"+i+","+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
		)
			
	}

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="bulk return" id="7f8f747b-f0cd-415b-8134-e66488f43895"><con:settings/><con:config service="http://localhost" resourcePath="/bulkReturn" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="bulk return" id="079536dd-4831-40a9-9131-328399c31a55" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"event": ${#TestCase#eventID},
	"ticketNumberF": ${#TestCase#ticketT},
	"ticketNumberT": ${#TestCase#ticketF}
	
}</con:request><con:originalUri>http://localhost/bulkReturn</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="67c9a1a2-15b5-4c5f-8a83-4643771a2e97" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="50abc112-996e-4250-b4ec-33f52fae9cc6"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	def x = 0;
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->
		x = x +1
		
	}

	if(x != testcase.getPropertyValue("ticketT").toInteger() - testcase.getPropertyValue("ticketF").toInteger()  +1){
		testRunner.fail("Failure")
	}
	sql.execute("commit;")

	def responseMessage = testRunner.testCase.testSteps["bulk return"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)
	if(json1.message != "Ticket range invalid"){
		testRunner.fail("Failure")
	}
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="a40fea19-4f51-470c-bf10-7920adbff603"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>29</con:value></con:property><con:property><con:name>eventID</con:name><con:value>29</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>5</con:value></con:property><con:property><con:name>eventname</con:name><con:value>MJxaQ2hR_ua</con:value></con:property><con:property><con:name>personname</con:name><con:value>MJxaQ2hR_ua</con:value></con:property></con:properties></con:testCase><con:testCase id="23339825-5543-4b95-a2fa-16345dbaf832" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="return - no such ticket" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="832d6459-5d99-4834-af88-000d494952a7"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="0eb08689-8c89-4b0a-a505-0963f09586f4"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1, " + testcase.getPropertyValue("ticketT") + " ,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	testcase.setPropertyValue("ticketTNot", (testcase.getPropertyValue("ticketT").toInteger() + 1).toString())
	
	for(int i =testcase.getPropertyValue("ticketF").toInteger(); i &lt;= testcase.getPropertyValue("ticketT").toInteger(); i++){

		sql.execute(
			"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,"+i+","+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
		)
			
	}

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="bulk return" id="0d8aca67-098d-4810-ace6-f3b982c109f6"><con:settings/><con:config service="http://localhost" resourcePath="/bulkReturn" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="bulk return" id="079536dd-4831-40a9-9131-328399c31a55" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"event": ${#TestCase#eventID},
	"ticketNumberF": ${#TestCase#ticketF},
	"ticketNumberT": ${#TestCase#ticketTNot}
	
}</con:request><con:originalUri>http://localhost/bulkReturn</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="67c9a1a2-15b5-4c5f-8a83-4643771a2e97" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="b9b911db-a7ea-4a32-8f51-83640a59c8cb"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	def x = 0;
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->
		x = x +1
		
	}

	if(x != testcase.getPropertyValue("ticketT").toInteger() - testcase.getPropertyValue("ticketF").toInteger()  +1){
		testRunner.fail("Failure")
	}
	sql.execute("commit;")

	def responseMessage = testRunner.testCase.testSteps["bulk return"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)
	if(json1.message != "No such Ticket"){
		testRunner.fail("Failure")
	}
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="4e985f56-5752-4bf0-bae7-c8fc65a1c56c"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>30</con:value></con:property><con:property><con:name>eventID</con:name><con:value>30</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>5</con:value></con:property><con:property><con:name>eventIDNot</con:name><con:value>7</con:value></con:property><con:property><con:name>ticketTNot</con:name><con:value>6</con:value></con:property><con:property><con:name>eventname</con:name><con:value>KkGcZSlkuyT</con:value></con:property><con:property><con:name>personname</con:name><con:value>KkGcZSlkuyT</con:value></con:property></con:properties></con:testCase><con:testCase id="0b367269-45cf-4d16-87c1-b9f9342ecacd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="return - surplus" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="5353cffa-7194-42ac-9316-d20bf85679ff"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	sql.eachRow("select * from surplus where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from surplus where id = " + row.id)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="fc2881aa-5f6d-452b-8ce7-0ff46ef6fe74"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1, " + testcase.getPropertyValue("ticketT") + " ,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	testcase.setPropertyValue("ticketTNot", (testcase.getPropertyValue("ticketT").toInteger() + 1).toString())

		testcase.setPropertyValue("amount", "100.00")
	for(int i =testcase.getPropertyValue("ticketF").toInteger(); i &lt;= testcase.getPropertyValue("ticketT").toInteger(); i++){

		
		sql.execute(
			"insert into ticket (amount, paid, ticket_number,eventid,personid) values (" + testcase.getPropertyValue("amount") + ",true,"+i+","+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
		)
		
	}
	

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="bulk return" id="a74e3ed2-d3a1-42f4-9f0a-d7f05ca46521"><con:settings/><con:config service="http://localhost" resourcePath="/bulkReturn" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="bulk return" id="079536dd-4831-40a9-9131-328399c31a55" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"event": ${#TestCase#eventID},
	"ticketNumberF": ${#TestCase#ticketF},
	"ticketNumberT": ${#TestCase#ticketT}
	
}</con:request><con:originalUri>http://localhost/bulkReturn</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="67c9a1a2-15b5-4c5f-8a83-4643771a2e97" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="66c22a7a-1bfb-4e02-90bd-b6ffba66af28"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	def x = 0;
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->
		x = x +1
		
	}

	if(x != 0){
		testRunner.fail("Failure")
	}
	sql.execute("commit;")

	sql.eachRow("select * from surplus where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->
		if(row.amount.toString() !=testcase.getPropertyValue("amount") ){
			testRunner.fail("Failure")
		}
	}
	
	def responseMessage = testRunner.testCase.testSteps["bulk return"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.ticket)
	if(json1.ticket != "Ticket balance handled"){
		testRunner.fail("Failure")
	}
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="c3f414d7-ba0e-4aad-a1ab-ee98d0268c30"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}

	sql.eachRow("select * from surplus where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from surplus where id = " + row.id)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>31</con:value></con:property><con:property><con:name>eventID</con:name><con:value>31</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>5</con:value></con:property><con:property><con:name>eventIDNot</con:name><con:value>7</con:value></con:property><con:property><con:name>ticketTNot</con:name><con:value>6</con:value></con:property><con:property><con:name>eventname</con:name><con:value>2L6c8bfnPyJ</con:value></con:property><con:property><con:name>personname</con:name><con:value>2L6c8bfnPyJ</con:value></con:property><con:property><con:name>amount</con:name><con:value>100.00</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="dc91140a-9d52-4a03-91f9-7ad1130b9eea" name="payment"><con:description>TestSuite generated for REST Service [http://localhost]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="e50e1a14-487f-4e55-b80e-d2ff621964d2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="payment - success" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="0fd504fd-f779-4a72-a2f7-eb3b4d92b029"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="e9d1ab1b-1e67-47ed-ade4-57b8e42c2029"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	sql.execute(
		"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,1,"+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
	)

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="payment" id="fcc81222-737b-4b30-94f4-2250ac410797"><con:settings/><con:config service="http://localhost" resourcePath="/payment" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="payment" id="c4f2f687-57a1-4311-858c-4681cf6b0155" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"eventid":${#TestCase#eventID},
	"ticketNumber":${#TestCase#ticketF},
	"amount" : 100
	
	
}</con:request><con:originalUri>http://localhost/payment</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="aa0395fa-c710-485b-b0b9-fd7a6ebd140b" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="9a56cb99-cfb6-49fa-92f4-09a794c2da0d"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->

		if(row.amount != 100){
			testRunner.fail("failure")
		}
	}
	
	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="ca05c91d-8676-4c39-94ca-b2cfab8c9e48"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>32</con:value></con:property><con:property><con:name>eventID</con:name><con:value>32</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>w76a8oiDxnQ</con:value></con:property><con:property><con:name>personname</con:name><con:value>w76a8oiDxnQ</con:value></con:property></con:properties></con:testCase><con:testCase id="da8b3c57-0684-4827-add2-b7056ce24fa3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="payment - incomplete json body" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="742c18ef-52c4-4e82-9d01-f2d0d97ab581"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="0b6c0109-44d1-4bb5-959f-0641af3722b9"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	sql.execute(
		"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,1,"+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
	)

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="payment" id="05572e66-836e-4860-ba18-b298989d1611"><con:settings/><con:config service="http://localhost" resourcePath="/payment" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="payment" id="c4f2f687-57a1-4311-858c-4681cf6b0155" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"ticketNumber":${#TestCase#ticketF},
	"amount" : 100
	
	
}</con:request><con:originalUri>http://localhost/payment</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="aa0395fa-c710-485b-b0b9-fd7a6ebd140b" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="f5d27a12-1968-4333-9081-c731541743ad"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )
	def x = 0
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->

		if(row.amount != 0){
			testRunner.fail("failure")
		}
		
	}

	def responseMessage = testRunner.testCase.testSteps["payment"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)

	if(json1.message != "Invalid Request Body"){
		testRunner.fail("failure")
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="a5395299-87a6-40d8-8523-920cd7254260"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>33</con:value></con:property><con:property><con:name>eventID</con:name><con:value>33</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>zy1umLPv7nx</con:value></con:property><con:property><con:name>personname</con:name><con:value>zy1umLPv7nx</con:value></con:property></con:properties></con:testCase><con:testCase id="6554e3ba-8826-48d0-9fa4-97bb1ae46352" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="payment - No such event" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="5bc8d6e9-76e7-4d4f-99f8-7b56caab212a"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="5eecd5fb-03da-4768-a1d0-b5ffe4d1d244"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
//	sql.execute(
//		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
//		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

//	sql.execute(
//		"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,1,"+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
//	)

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="payment" id="2908a320-9cf9-4bd6-bee8-1aec4c558beb"><con:settings/><con:config service="http://localhost" resourcePath="/payment" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="payment" id="c4f2f687-57a1-4311-858c-4681cf6b0155" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"eventid" : ${#TestCase#eventID},
	"ticketNumber":${#TestCase#ticketF},
	"amount" : 100
	
	
}</con:request><con:originalUri>http://localhost/payment</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="aa0395fa-c710-485b-b0b9-fd7a6ebd140b" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="59d2daef-769e-4569-a341-f4854d1281e3"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )
	def x = 0
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->

		if(row.amount != 0){
			testRunner.fail("failure")
		}
		
	}

	def responseMessage = testRunner.testCase.testSteps["payment"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)

	if(json1.message != "No Such Event"){
		testRunner.fail("failure")
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="47549399-3c32-4c84-8786-a8f353197f08"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>34</con:value></con:property><con:property><con:name>eventID</con:name><con:value>4</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>RGIerl1JCGW</con:value></con:property><con:property><con:name>personname</con:name><con:value>RGIerl1JCGW</con:value></con:property></con:properties></con:testCase><con:testCase id="0b329c11-ad16-4255-8baa-303c95842bf9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="payment - No such Ticket" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="fbee5db8-086e-46d8-965c-08b34d9819a2"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="c3127a54-69a6-4188-8625-0780412fb954"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

//	sql.execute(
//		"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,1,"+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
//	)

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="payment" id="3dfe0a0c-e22c-4224-b1d0-3923660e23fb"><con:settings/><con:config service="http://localhost" resourcePath="/payment" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="payment" id="c4f2f687-57a1-4311-858c-4681cf6b0155" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"eventid" : ${#TestCase#eventID},
	"ticketNumber":${#TestCase#ticketF},
	"amount" : 100
	
	
}</con:request><con:originalUri>http://localhost/payment</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="aa0395fa-c710-485b-b0b9-fd7a6ebd140b" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="4b422458-2c27-469a-b4a9-a969dba1f515"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )
	def x = 0
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->

		if(row.amount != 0){
			testRunner.fail("failure")
		}
		
	}

	def responseMessage = testRunner.testCase.testSteps["payment"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)

	if(json1.message != "No such Ticket"){
		testRunner.fail("failure")
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="282d0a74-67be-4887-9580-3513017f6d1a"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>35</con:value></con:property><con:property><con:name>eventID</con:name><con:value>34</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>rkHtWpR7dQ8</con:value></con:property><con:property><con:name>personname</con:name><con:value>rkHtWpR7dQ8</con:value></con:property></con:properties></con:testCase><con:testCase id="ccdc1fb8-3dd3-460e-b3aa-4670984eee85" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="payment - ticket paid" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="92a5e76f-341b-4a3f-9b1d-94af1441dc5c"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="002cf86d-94ae-402f-9c0a-c8f9801e8d68"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	sql.execute(
		"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,true,1,"+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
	)

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="payment" id="b94eaf30-5631-4f10-8bd4-de8015d850ed"><con:settings/><con:config service="http://localhost" resourcePath="/payment" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="payment" id="c4f2f687-57a1-4311-858c-4681cf6b0155" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"eventid" : ${#TestCase#eventID},
	"ticketNumber":${#TestCase#ticketF},
	"amount" : 100
	
	
}</con:request><con:originalUri>http://localhost/payment</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="aa0395fa-c710-485b-b0b9-fd7a6ebd140b" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="b4dd26be-bc32-4874-b6ef-540a33e2d595"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )
	def x = 0
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->

		if(row.amount != 0){
			testRunner.fail("failure")
		}
		
	}

	def responseMessage = testRunner.testCase.testSteps["payment"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)

	if(json1.message != "Ticket already paid"){
		testRunner.fail("failure")
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="e63b1728-b1eb-4656-a5cb-dc7b9d374344"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>36</con:value></con:property><con:property><con:name>eventID</con:name><con:value>35</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>pZBEXd6nrKq</con:value></con:property><con:property><con:name>personname</con:name><con:value>pZBEXd6nrKq</con:value></con:property></con:properties></con:testCase><con:testCase id="161f758f-0c91-45ca-b6d6-17645703fba8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="payment - surplus" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="b5465af8-facc-4eb9-87c9-7c0562b12bb0"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}

	sql.eachRow("select * from surplus where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from surplus where id = " + row.id)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="e2d96b0c-dc06-434a-9128-afe042952ecd"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	sql.execute(
		"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,1,"+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
	)

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="payment" id="8506a98b-821b-4ad8-b9c8-dd1d56985cd1"><con:settings/><con:config service="http://localhost" resourcePath="/payment" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="payment" id="c4f2f687-57a1-4311-858c-4681cf6b0155" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"eventid":${#TestCase#eventID},
	"ticketNumber":${#TestCase#ticketF},
	"amount" : 110
	
	
}</con:request><con:originalUri>http://localhost/payment</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="aa0395fa-c710-485b-b0b9-fd7a6ebd140b" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="c6617046-8d66-456a-8293-135766149746"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->

		if(row.amount != 100){
			testRunner.fail("failure")
		}
	}

	sql.eachRow("select * from surplus where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->

		if(row.amount != 10){
			testRunner.fail("failure")
		}

	}

	def responseMessage = testRunner.testCase.testSteps["payment"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)

	if(json1.surplus != "paid excess" &amp;&amp; json1.surplus != 10){
		testRunner.fail("failure")
	}
	
	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="6ee8d019-2092-4df2-82bf-6cdd17e89b62"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}

	sql.eachRow("select * from surplus where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from surplus where id = " + row.id)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>37</con:value></con:property><con:property><con:name>eventID</con:name><con:value>36</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>QooAi7oLHmL</con:value></con:property><con:property><con:name>personname</con:name><con:value>QooAi7oLHmL</con:value></con:property></con:properties></con:testCase><con:testCase id="799619a2-c46b-42b0-a8b1-b1b4e791e88f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="payment - paid short" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="ba8e36cc-2b2a-49b8-842b-ac4cd3700783"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="ecd8b13b-60d1-4cec-b249-cd72fd2da7c6"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	sql.execute(
		"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,1,"+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
	)

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="payment" id="bd13b794-6433-4f86-9ff4-81ec184ac3bd"><con:settings/><con:config service="http://localhost" resourcePath="/payment" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="payment" id="c4f2f687-57a1-4311-858c-4681cf6b0155" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"eventid":${#TestCase#eventID},
	"ticketNumber":${#TestCase#ticketF},
	"amount" : 90
	
	
}</con:request><con:originalUri>http://localhost/payment</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="aa0395fa-c710-485b-b0b9-fd7a6ebd140b" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="84c90b58-1efd-461e-8685-59e36f2c1654"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->

		if(row.amount != 90 &amp;&amp; row.paid == true){
			testRunner.fail("failure")
		}
	}
	
	def responseMessage = testRunner.testCase.testSteps["payment"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)

	if(json1.short != "paid short" &amp;&amp; json1.short != 10){
		testRunner.fail("failure")
	}
	
	
	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="12f1f747-a3e1-4ee6-8afb-8658fc8f8e22"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>38</con:value></con:property><con:property><con:name>eventID</con:name><con:value>37</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>Bl70ook1tiZ</con:value></con:property><con:property><con:name>personname</con:name><con:value>Bl70ook1tiZ</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="64f9309e-5c8a-456a-b676-e30955df2cbd" name="bulk payment"><con:description>TestSuite generated for REST Service [http://localhost]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="0693fbe2-5042-49f5-ad7c-7a77cc351edb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="bulk payment - success" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="357cacfc-5895-46f1-9033-5819999388ea"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="1dff9c9b-c9e2-4ff6-9659-8a04ff2ff868"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	for(int i =testcase.getPropertyValue("ticketF").toInteger(); i &lt;= testcase.getPropertyValue("ticketT").toInteger(); i++){

		sql.execute(
			"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,"+i+","+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
		)
			
	}

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="bulk pay" id="3a65ca86-fd97-49e4-9838-64031f00e5c4"><con:settings/><con:config service="http://localhost" resourcePath="/bulkPayment" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="bulk pay" id="295e904e-82ec-4794-9183-7253a94f62a8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"event": ${#TestCase#eventID},
	"ticketNumberF": ${#TestCase#ticketF},
	"ticketNumberT": ${#TestCase#ticketT},
	"amount": 1000
	
}</con:request><con:originalUri>http://localhost/bulkPayment</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="29590f96-e024-4f31-a23d-e77ab51de5f1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="fd7a094b-de98-478b-bc12-e07d88374b2a"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->

		if(row.amount != 100){
			testRunner.fail("failure")
		}
	}
	
	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="2ae5b20a-5c8c-4ce8-93de-dadcd4f39b68"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>39</con:value></con:property><con:property><con:name>eventID</con:name><con:value>38</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>40Zuc8eBc_y</con:value></con:property><con:property><con:name>personname</con:name><con:value>40Zuc8eBc_y</con:value></con:property></con:properties></con:testCase><con:testCase id="bd0d1967-ae7e-459c-b9d8-09757e1d51ef" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="bulk payment - invalid json body" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="516fffb3-67db-48da-97f2-af669801ad8c"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="fe629798-da6e-4edd-8095-88166a300a4c"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	for(int i =testcase.getPropertyValue("ticketF").toInteger(); i &lt;= testcase.getPropertyValue("ticketT").toInteger(); i++){

		sql.execute(
			"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,"+i+","+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
		)
			
	}

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="bulk pay" id="59adee90-9b73-4d95-b901-fb53d958037f"><con:settings/><con:config service="http://localhost" resourcePath="/bulkPayment" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="bulk pay" id="295e904e-82ec-4794-9183-7253a94f62a8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"ticketNumberF": ${#TestCase#ticketF},
	"ticketNumberT": ${#TestCase#ticketT},
	"amount": 1000
	
}</con:request><con:originalUri>http://localhost/bulkPayment</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="29590f96-e024-4f31-a23d-e77ab51de5f1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="2068989b-a92f-46bd-89cf-4a8959d6a4ba"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->

		if(row.paid == true){
			testRunner.fail("payment should not have gone throgh for incomplete json body")
		}
	}
	
	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="4c64d359-fd36-47da-b319-93d67b4b8eeb"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>40</con:value></con:property><con:property><con:name>eventID</con:name><con:value>39</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>9BwtzAJqrSM</con:value></con:property><con:property><con:name>personname</con:name><con:value>9BwtzAJqrSM</con:value></con:property></con:properties></con:testCase><con:testCase id="7e907f57-f149-480b-9ee5-1218c2822d76" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="bulk payment - surplus" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="9aad50a9-4f8b-46c1-b95c-cd03d2845bcb"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}

	sql.eachRow("select * from surplus where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from surplus where id = " + row.id)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="541a4a79-d200-48e6-84b3-ca24c4a5c085"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	for(int i =testcase.getPropertyValue("ticketF").toInteger(); i &lt;= testcase.getPropertyValue("ticketT").toInteger(); i++){

		sql.execute(
			"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,"+i+","+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
		)
			
	}

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="bulk pay" id="239c1c28-928a-4c2e-b978-c3e288696197"><con:settings/><con:config service="http://localhost" resourcePath="/bulkPayment" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="bulk pay" id="295e904e-82ec-4794-9183-7253a94f62a8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"event": ${#TestCase#eventID},
	"ticketNumberF": ${#TestCase#ticketF},
	"ticketNumberT": ${#TestCase#ticketT},
	"amount": 1100
	
}</con:request><con:originalUri>http://localhost/bulkPayment</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="29590f96-e024-4f31-a23d-e77ab51de5f1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="118e0cc7-171b-4366-bd9c-72f8afa9505b"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->

		if(row.amount != 100){
			testRunner.fail("failure")
		}
	}

	sql.eachRow("select * from surplus where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
	
		if(row.amount != 100){
			testRunner.fail("entry in db should match excess amount given in endpoint body")
		}
	}

	def responseMessage = testRunner.testCase.testSteps["bulk pay"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)

	if(json1.surplus != "surplus amount given" &amp;&amp; json1.surplus != 100){
		testRunner.fail("failure")
	}
	
	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="af48ea30-1497-426c-8820-486b349f4f8d"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from surplus where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from surplus where id = " + row.id)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>41</con:value></con:property><con:property><con:name>eventID</con:name><con:value>40</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>iI9wYQXP4Pw</con:value></con:property><con:property><con:name>personname</con:name><con:value>iI9wYQXP4Pw</con:value></con:property></con:properties></con:testCase><con:testCase id="96e7a5da-0ab3-4211-9e72-af9faf8bd86c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="bulk payment - paid short" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="c87dfd2b-4153-455d-b3e4-0a461ffc967d"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="1e927b81-1269-44a6-abf4-293c06806ead"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	for(int i =testcase.getPropertyValue("ticketF").toInteger(); i &lt;= testcase.getPropertyValue("ticketT").toInteger(); i++){

		sql.execute(
			"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,"+i+","+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
		)
			
	}

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="bulk pay" id="b24059f0-04f2-444c-bffa-5366676a7f1f"><con:settings/><con:config service="http://localhost" resourcePath="/bulkPayment" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="bulk pay" id="295e904e-82ec-4794-9183-7253a94f62a8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"event": ${#TestCase#eventID},
	"ticketNumberF": ${#TestCase#ticketF},
	"ticketNumberT": ${#TestCase#ticketT},
	"amount": 950
	
}</con:request><con:originalUri>http://localhost/bulkPayment</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="29590f96-e024-4f31-a23d-e77ab51de5f1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="41d03b1c-0371-496c-bf8c-23ec28e28f78"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	def x = 0
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->

		x = x + 1

		if(x == testcase.getPropertyValue("ticketT").toInteger() - testcase.getPropertyValue("ticketF").toInteger() + 1){
			if(row.amount != 50 &amp;&amp; row.paid == true){
				testRunner.fail("failure")
			}
		}else{
			if(row.amount != 100){
				testRunner.fail("failure")
			}	
		}
		
	}

	def responseMessage = testRunner.testCase.testSteps["bulk pay"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)

	if(json1.short != "paid short" &amp;&amp; json1.short != 50){
		testRunner.fail("response body - check it")
	}
	
	
	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="ee3c7d8b-ada6-48ed-aac9-803353ab09cb"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>42</con:value></con:property><con:property><con:name>eventID</con:name><con:value>41</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>6ykBXi5V0q3</con:value></con:property><con:property><con:name>personname</con:name><con:value>6ykBXi5V0q3</con:value></con:property></con:properties></con:testCase><con:testCase id="bcdd9081-1958-4c01-8a63-cc5b427794e5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="bulk payment - range invalid" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="79bc2956-5d87-4946-922e-a93692497805"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="610cef20-e2ee-4705-80bd-aa4dd81181d9"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	for(int i =testcase.getPropertyValue("ticketF").toInteger(); i &lt;= testcase.getPropertyValue("ticketT").toInteger(); i++){

		sql.execute(
			"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,"+i+","+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
		)
			
	}

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="bulk pay" id="d1a2f75b-c00c-4b28-831d-74d5e55f286f"><con:settings/><con:config service="http://localhost" resourcePath="/bulkPayment" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="bulk pay" id="295e904e-82ec-4794-9183-7253a94f62a8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"event": ${#TestCase#eventID},
	"ticketNumberF": ${#TestCase#ticketT},
	"ticketNumberT": ${#TestCase#ticketF},
	"amount": 1000
	
}</con:request><con:originalUri>http://localhost/bulkPayment</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="29590f96-e024-4f31-a23d-e77ab51de5f1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="bd70f945-0f52-4b3a-9884-88df9d201cf4"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->

		if(row.amount == 100 || row.paid == true){
			testRunner.fail("failure")
		}
	}

	def responseMessage = testRunner.testCase.testSteps["bulk pay"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)

	if(json1.message != "Ticket range invalid"){
		testRunner.fail("faile")
	}
	
	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="2571ddbd-23e7-460d-a2d7-dc333436e58a"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>43</con:value></con:property><con:property><con:name>eventID</con:name><con:value>42</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>ZFoC4pkPXje</con:value></con:property><con:property><con:name>personname</con:name><con:value>ZFoC4pkPXje</con:value></con:property></con:properties></con:testCase><con:testCase id="ad7e8cfd-00c4-4f82-ba8f-0aea12623939" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="bulk payment - Ticket in range does not exist" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="3e59837a-cf96-4407-8661-f2a135954a35"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="936d659e-e138-4771-ba21-8cbb39d91ba3"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	for(int i =testcase.getPropertyValue("ticketF").toInteger(); i &lt; testcase.getPropertyValue("ticketT").toInteger(); i++){

		sql.execute(
			"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,"+i+","+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
		)
			
	}

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="bulk pay" id="67566762-4ae6-43f9-8c2f-64121c39e7a3"><con:settings/><con:config service="http://localhost" resourcePath="/bulkPayment" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="bulk pay" id="295e904e-82ec-4794-9183-7253a94f62a8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"event": ${#TestCase#eventID},
	"ticketNumberF": ${#TestCase#ticketF},
	"ticketNumberT": ${#TestCase#ticketT},
	"amount": 1000
	
}</con:request><con:originalUri>http://localhost/bulkPayment</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="29590f96-e024-4f31-a23d-e77ab51de5f1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="0ef7596a-408e-43b9-b94a-182be8711bf9"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->

		if(row.amount == 100 || row.paid == true){
			testRunner.fail("failure")
		}
	}

	def responseMessage = testRunner.testCase.testSteps["bulk pay"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)

	if(json1.message != "Ticket in range does not exist"){
		testRunner.fail("faile")
	}
	
	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="0c26c1b8-659c-4aa6-980b-f23ac60bee19"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>44</con:value></con:property><con:property><con:name>eventID</con:name><con:value>43</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>Hg50jj48wpO</con:value></con:property><con:property><con:name>personname</con:name><con:value>Hg50jj48wpO</con:value></con:property></con:properties></con:testCase><con:testCase id="16d2b52f-4741-4627-a1a6-557a4aed30a1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="bulk payment - Ticket out of range" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="1a399f61-1434-4735-9c47-c052c36d72bb"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="c0c15c65-6d9f-44fb-9352-4f81e7889874"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,9,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	for(int i =testcase.getPropertyValue("ticketF").toInteger(); i &lt;= testcase.getPropertyValue("ticketT").toInteger(); i++){

		sql.execute(
			"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,"+i+","+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
		)
			
	}

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="bulk pay" id="2d47fa1f-2fea-4aab-b258-38327e484fdc"><con:settings/><con:config service="http://localhost" resourcePath="/bulkPayment" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="bulk pay" id="295e904e-82ec-4794-9183-7253a94f62a8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	
	"event": ${#TestCase#eventID},
	"ticketNumberF": ${#TestCase#ticketF},
	"ticketNumberT": ${#TestCase#ticketT},
	"amount": 1000
	
}</con:request><con:originalUri>http://localhost/bulkPayment</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="29590f96-e024-4f31-a23d-e77ab51de5f1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="25de0400-1955-494a-9b62-aea58a1506e1"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->

		if(row.amount == 100 || row.paid == true){
			testRunner.fail("failure")
		}
	}

	def responseMessage = testRunner.testCase.testSteps["bulk pay"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)

	if(json1.message != "Ticket out of range"){
		testRunner.fail("faile")
	}
	
	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="bc3dab59-3939-41e2-948f-3e10d707c19e"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>45</con:value></con:property><con:property><con:name>eventID</con:name><con:value>44</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>IX866CBryiX</con:value></con:property><con:property><con:name>personname</con:name><con:value>IX866CBryiX</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="875a2a6a-655a-44c7-bd36-05e4fbef95c2" name="pay by person"><con:description>TestSuite generated for REST Service [http://localhost]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="dc86ced6-907f-4256-9f2b-ca43f3647b24" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="pay by person- success" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="9ff80799-156a-4cb1-8112-2aa2b2202370"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="0160f351-b352-4121-958f-910545207a3a"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	for(int i =testcase.getPropertyValue("ticketF").toInteger(); i &lt;= testcase.getPropertyValue("ticketT").toInteger(); i++){

		sql.execute(
			"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,"+i+","+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
		)
			
	}

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="pay by person" id="f574ee98-346a-4faf-af7a-d8b86aa0f9cf"><con:settings/><con:config service="http://localhost" resourcePath="/payByPerson" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="pay by person" id="deebda3b-de3a-4b14-a382-bc83235943b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"eventid": ${#TestCase#eventID},
	"personid" : ${#TestCase#personID},
	"amount" : 1000
}</con:request><con:originalUri>http://localhost/payByPerson</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="27fb17d4-8122-4b43-8d6d-3ee4bba297d2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="6b908f83-f709-4cd0-9eeb-f64dd03a6c87"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->

		if(row.amount != 100){
			testRunner.fail("failure")
		}
	}
	
	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="d7fa4b08-ff4e-46df-94a5-d20215787325"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>46</con:value></con:property><con:property><con:name>eventID</con:name><con:value>45</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>u3tWsQ1qzdL</con:value></con:property><con:property><con:name>personname</con:name><con:value>u3tWsQ1qzdL</con:value></con:property></con:properties></con:testCase><con:testCase id="0c413211-ab12-4dae-8e82-02cc0b4dc4a8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="pay by person - incomplete json body" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="3e453f7d-a52a-461c-a509-73d8d4f8a88b"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="dcd3b3a6-d877-40b9-b6e7-9d143831af38"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
	}

	for(int i =testcase.getPropertyValue("ticketF").toInteger(); i &lt;= testcase.getPropertyValue("ticketT").toInteger(); i++){

		sql.execute(
			"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,"+i+","+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
		)
			
	}

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="pay by person" id="19e79d45-f936-4a29-98db-756fcd1ce6bf"><con:settings/><con:config service="http://localhost" resourcePath="/payByPerson" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="pay by person" id="deebda3b-de3a-4b14-a382-bc83235943b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"personid" : ${#TestCase#personID},
	"amount" : 1000
}</con:request><con:originalUri>http://localhost/payByPerson</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="27fb17d4-8122-4b43-8d6d-3ee4bba297d2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="b01de698-16dc-49d4-8a03-e52dd035f37f"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->

		if(row.paid == true){
			testRunner.fail("failure")
		}
	}

	def responseMessage = testRunner.testCase.testSteps["pay by person"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)

	if(json1.message != "Invalid Request Body"){
		testRunner.fail("faile")
	}
	

	

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="c34314ac-f0e0-4432-8ce6-8e9cddd44612"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>47</con:value></con:property><con:property><con:name>eventID</con:name><con:value>46</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>L_O7BY7J87R</con:value></con:property><con:property><con:name>personname</con:name><con:value>L_O7BY7J87R</con:value></con:property></con:properties></con:testCase><con:testCase id="e42e240d-406e-4c6e-abb8-d302926bb2d3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="pay by person - no such person/ event" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="27a1db31-f41d-4029-94ec-12d57bef4638"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="797dc2a5-354f-4f52-a71f-04281fb774eb"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
		testcase.setPropertyValue("eventIDNot", (row.eventid.toInteger() + 1).toString())
	}

	for(int i =testcase.getPropertyValue("ticketF").toInteger(); i &lt;= testcase.getPropertyValue("ticketT").toInteger(); i++){

		sql.execute(
			"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,"+i+","+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
		)
			
	}

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="pay by person" id="cdd61f02-207a-4276-a1dd-9fa9ccea115e"><con:settings/><con:config service="http://localhost" resourcePath="/payByPerson" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="pay by person" id="deebda3b-de3a-4b14-a382-bc83235943b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"eventid" : ${#TestCase#eventIDNot},
	"personid" : ${#TestCase#personID},
	"amount" : 1000
}</con:request><con:originalUri>http://localhost/payByPerson</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="27fb17d4-8122-4b43-8d6d-3ee4bba297d2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="63c4a3b7-015c-4334-835d-e33f8cc453e1"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->

		if(row.paid == true){
			testRunner.fail("failure")
		}
	}

	def responseMessage = testRunner.testCase.testSteps["pay by person"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)

	if(json1.message != "No such person or event"){
		testRunner.fail("faile")
	}
	

	

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="c46b692f-1772-4de2-b794-87375556c2c4"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>48</con:value></con:property><con:property><con:name>eventID</con:name><con:value>47</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>2fvRGyiXCpf</con:value></con:property><con:property><con:name>personname</con:name><con:value>2fvRGyiXCpf</con:value></con:property><con:property><con:name>eventIDNot</con:name><con:value>48</con:value></con:property></con:properties></con:testCase><con:testCase id="79a9b303-24f2-480d-baf0-8acb481931fa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="pay by person - paid short" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="9abde68e-5f28-4824-bbd1-631a23571090"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="ba0727e7-1dc8-485a-be45-7353b2187bc6"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
		testcase.setPropertyValue("eventIDNot", (row.eventid.toInteger() + 1).toString())
	}

	for(int i =testcase.getPropertyValue("ticketF").toInteger(); i &lt;= testcase.getPropertyValue("ticketT").toInteger(); i++){

		sql.execute(
			"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,"+i+","+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
		)
			
	}

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="pay by person" id="be1f16b3-5af0-43dd-b4a1-1dea1ff855c7"><con:settings/><con:config service="http://localhost" resourcePath="/payByPerson" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="pay by person" id="deebda3b-de3a-4b14-a382-bc83235943b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"eventid" : ${#TestCase#eventID},
	"personid" : ${#TestCase#personID},
	"amount" : 950
}</con:request><con:originalUri>http://localhost/payByPerson</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="27fb17d4-8122-4b43-8d6d-3ee4bba297d2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="438efcca-3259-40ab-9430-83d6087a6a12"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	def x = 0
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->

		x = x + 1

		if(x == testcase.getPropertyValue("ticketT").toInteger() - testcase.getPropertyValue("ticketF").toInteger() + 1){
			if(row.amount != 50 &amp;&amp; row.paid == true){
				testRunner.fail("failure")
			}
		}else{
			if(row.amount != 100){
				testRunner.fail("failure")
			}
		}	
	}

	def responseMessage = testRunner.testCase.testSteps["pay by person"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)

	if(json1.short != "paid short" &amp;&amp; json1.short != 50){
		testRunner.fail("response body - check it")
	}

	

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="e853f888-875c-4304-996e-518a18e588b4"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>49</con:value></con:property><con:property><con:name>eventID</con:name><con:value>48</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>VYxA_IuNG4a</con:value></con:property><con:property><con:name>personname</con:name><con:value>VYxA_IuNG4a</con:value></con:property><con:property><con:name>eventIDNot</con:name><con:value>49</con:value></con:property></con:properties></con:testCase><con:testCase id="81dc8eaf-3114-45cc-876e-d0b9d54f04cc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="pay by person - surplus" searchProperties="true"><con:description>TestCase generated for REST Resource [bulkAllocateTicket] located at [/bulkAllocateTicket]</con:description><con:settings/><con:testStep type="groovy" name="Clean" id="e55af9d5-3301-4d09-bcc3-e246af19058f"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}

	sql.eachRow("select * from surplus where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from surplus where id = " + row.id)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Set up" id="216174be-4c33-4060-b5e1-c72ef0e2f814"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

try {
	sql.execute("use ticketmanagement")
	sql.execute(
		"insert into person(name,surname,number,email) values('" + testcase.getPropertyValue("personname") + "','surname','0724431348','a@gmail.com')"
		)
	sql.execute(
		"insert into event(active,name,range_from,range_to,ticket_price, date_opened) values(true,'" + testcase.getPropertyValue("eventname") + "',1,1000,100, '2020-01-01')"
		)

	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		testcase.setPropertyValue("personID", row.id.toString())
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		testcase.setPropertyValue("eventID", row.eventid.toString())
		testcase.setPropertyValue("eventIDNot", (row.eventid.toInteger() + 1).toString())
	}

	for(int i =testcase.getPropertyValue("ticketF").toInteger(); i &lt;= testcase.getPropertyValue("ticketT").toInteger(); i++){

		sql.execute(
			"insert into ticket (amount, paid, ticket_number,eventid,personid) values (0.00,false,"+i+","+testcase.getPropertyValue("eventID") + "," + testcase.getPropertyValue("personID") +")"
		)
			
	}

	sql.execute("commit;")
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="pay by person" id="a1ccf602-fb78-4a1c-947e-aa5c6d2293e1"><con:settings/><con:config service="http://localhost" resourcePath="/payByPerson" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="pay by person" id="deebda3b-de3a-4b14-a382-bc83235943b8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"eventid" : ${#TestCase#eventID},
	"personid" : ${#TestCase#personID},
	"amount" : 1100
}</con:request><con:originalUri>http://localhost/payByPerson</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="27fb17d4-8122-4b43-8d6d-3ee4bba297d2" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate" id="0b5df4f2-8cc3-4b26-a2bd-ff000142f71d"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	def x = 0
	sql.eachRow("select * from ticket where eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID")+ ";" 
	){row ->

		x = x + 1
		if(row.paid != true){
			testRunner.fail("Endpoint error")	
		}
	}

	sql.eachRow("select * from surplus where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
	
		if(row.amount != 100){
			testRunner.fail("entry in db should match excess amount given in endpoint body")
		}
	}

	def responseMessage = testRunner.testCase.testSteps["pay by person"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)

	if(json1.surplus != "surplus amount given" &amp;&amp; json1.surplus != 100){
		testRunner.fail("failure")
	}

	

	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Clean - end" id="8ec2cafe-656e-40b9-8baa-8dada930bb6e"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

	sql.eachRow("select * from ticket where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from ticket where ticketid = " + row.ticketid)
	}

	sql.eachRow("select * from surplus where " + 
		" eventid = " + testcase.getPropertyValue("eventID") + 
		" and personid = " +testcase.getPropertyValue("personID") ){row ->
		sql.execute("delete from surplus where id = " + row.id)
	}
	
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("personname") + "' ;"){ row ->
		sql.execute("delete from person where id = "+ row.id)		
	}

	sql.eachRow("select  * from event where name = '" + testcase.getPropertyValue("eventname") + "' ;"){ row ->
		sql.execute("delete from event where eventid = "+ row.eventid)		
	}



	sql.execute("commit;")
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>personID</con:name><con:value>50</con:value></con:property><con:property><con:name>eventID</con:name><con:value>49</con:value></con:property><con:property><con:name>ticketF</con:name><con:value>1</con:value></con:property><con:property><con:name>ticketT</con:name><con:value>10</con:value></con:property><con:property><con:name>eventname</con:name><con:value>VLHSlby6CfH</con:value></con:property><con:property><con:name>personname</con:name><con:value>VLHSlby6CfH</con:value></con:property><con:property><con:name>eventIDNot</con:name><con:value>50</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="2c750769-0c46-4d99-9014-8bf99a4ff988" name="Event Controller Test"><con:description>TestSuite generated for REST Service [http://localhost]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="b2b59ef1-7b09-4f06-b10c-070cf6574e30" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="addEvent - success" searchProperties="true"><con:description>TestCase generated for REST Resource [addEvent] located at [/addEvent]</con:description><con:settings/><con:testStep type="groovy" name="clean start" id="c51f795b-3005-4e2b-b2ea-d81f8ae3e547"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	def x = 0
	sql.eachRow("select * from event where name = '" + testcase.getPropertyValue("eventname") + "';"
	){row ->
		sql.execute("delete from event where eventid = "+testcase.getPropertyValue("id"))
	}

	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Setup" id="372933cb-ddd8-4ed3-9c47-d28889ca06e7"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("eventname", randomString)
testcase.setPropertyValue("personname", randomString)

//testcase.setPropertyValue("name", "SoapUI Event 1")
testcase.setPropertyValue("from", "1" )
testcase.setPropertyValue("to", "10" )
testcase.setPropertyValue("active", "true")
testcase.setPropertyValue("price", "100" )
return null</script></con:config></con:testStep><con:testStep type="restrequest" name="add event" id="226ce06a-173d-44b3-8069-428a334c6060"><con:settings/><con:config service="http://localhost" resourcePath="/addEvent" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="add event" id="bc31d697-9170-4812-acfb-8a231b07a111" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"name" : "${#TestCase#eventname}",
	"from": ${#TestCase#from},
	"to" : ${#TestCase#to},
	"active": ${#TestCase#active},
	"ticketPrice" : ${#TestCase#price}
}</con:request><con:originalUri>http://localhost/addEvent</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="88dcab88-09cc-41af-ab62-a12e7723b2fb" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate add" id="f2b15cd6-bea1-4062-97c6-4bb6a5baf6a0"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	def x = 0
	sql.eachRow("select * from event where name = '" + testcase.getPropertyValue("eventname") + "';"
	){row ->
		x = x +1
		log.info("successs")
		testcase.setPropertyValue("id", row.eventid.toString())
	}

	if(x == 0){
		testRunner.fail("error")
	}
	
	
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="edit event" id="978211d1-06e3-4867-a25b-3d9a30c4a4cf"><con:settings/><con:config service="http://localhost" resourcePath="/updateEvent/{id}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="edit event" id="a248e201-a597-4d40-a4a6-5c3c3e07af6c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
        "ticketPrice": ${#TestCase#newprice}
    }</con:request><con:originalUri>http://localhost/updateEvent</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8f853d13-5ce0-4f25-b45e-b87ede884749" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate edit" id="04bdaf18-df76-4dc0-bf6e-b2f52b871402"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	def x = 0
	sql.eachRow("select * from event where name = '" + testcase.getPropertyValue("eventname") + "';"
	){row ->
		x = x +1

		log.info(row.ticket_price.toString())
		log.info(testcase.getPropertyValue("newprice"))
		if(testcase.getPropertyValue("newprice") != row.ticket_price.toString()){
			testRunner.fail("Fail")
		}
		testcase.setPropertyValue("id", row.eventid.toString())
	}

	if(x == 0){
		testRunner.fail("error")
	}
	//log.info("successs")
	
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="close event" id="f3be73cb-6167-480d-b362-dacc69e9f9c1"><con:settings/><con:config service="http://localhost" resourcePath="/updateEvent/{id}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="close event" id="a248e201-a597-4d40-a4a6-5c3c3e07af6c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
        "active": false
    }</con:request><con:originalUri>http://localhost/updateEvent</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8f853d13-5ce0-4f25-b45e-b87ede884749" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate close" id="f3ae27b3-8df6-4fb5-9f87-6c15fb4678ef"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	def x = 0
	sql.eachRow("select * from event where name = '" + testcase.getPropertyValue("eventname") + "';"
	){row ->
		x = x +1
		if(false != row.active){
			testRunner.fail("Fail")
		}
		testcase.setPropertyValue("id", row.eventid.toString())
	}

	if(x == 0){
		testRunner.fail("error")
	}
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="delete" id="1cb05f1b-6e01-41f1-b952-5294c19c0b29"><con:settings/><con:config service="http://localhost" resourcePath="/deleteEvent/{id}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="delete" id="78db1554-d94a-4380-beb3-1f43d0a13b20" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request/><con:originalUri>http://localhost/deleteEvent/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ee1ac774-c7d7-4a17-b390-4b1b826d78b4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate delete" id="01728381-7668-4786-9ba9-a5dbaecb1011"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	def x = 0
	sql.eachRow("select * from event where name = '" + testcase.getPropertyValue("eventname") + "';"
	){row ->
		x = x +1
	}

	if(x != 0){
		testRunner.fail("error")
	}

	def responseMessage = testRunner.testCase.testSteps["delete"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)

	if(json1.message != "success"){
		testRunner.fail("error")
	}
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="clean" id="3dd2897a-bd78-4be7-8725-6c7f17532f74"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	def x = 0
	sql.eachRow("select * from event where name = '" + testcase.getPropertyValue("eventname") + "';"
	){row ->
		sql.execute("delete from event where eventid = "+testcase.getPropertyValue("id"))
	}

	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>name</con:name><con:value>SoapUI Event 1</con:value></con:property><con:property><con:name>from</con:name><con:value>1</con:value></con:property><con:property><con:name>to</con:name><con:value>10</con:value></con:property><con:property><con:name>active</con:name><con:value>true</con:value></con:property><con:property><con:name>price</con:name><con:value>100</con:value></con:property><con:property><con:name>newprice</con:name><con:value>200.00</con:value></con:property><con:property><con:name>id</con:name><con:value>50</con:value></con:property><con:property><con:name>eventname</con:name><con:value>Dkz8J88CiAI</con:value></con:property><con:property><con:name>personname</con:name><con:value>Dkz8J88CiAI</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:testSuite id="1b47ae47-99aa-491b-8091-8c369eb405f2" name="Person Controller Test"><con:description>TestSuite generated for REST Service [http://localhost]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="4e303c47-33f9-47d4-b882-d9fab0d51e84" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="add person- success" searchProperties="true"><con:description>TestCase generated for REST Resource [addEvent] located at [/addEvent]</con:description><con:settings/><con:testStep type="groovy" name="clean start" id="14c7344f-3628-4260-874b-06a94c7c5154"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	def x = 0
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("name") + "';"
	){row ->
		sql.execute("delete from person where eventid = "+testcase.getPropertyValue("id"))
	}

	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="Setup" id="ce5c18b1-a9bb-4d70-82df-7151e1ebc80c"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

def pool = ['a'..'z','A'..'Z',0..9,'_'].flatten()
Random rand = new Random(System.currentTimeMillis())

def chars = (0..10).collect { pool[rand.nextInt(pool.size())] }
def randomString = chars.join()

testcase.setPropertyValue("name", randomString)
testcase.setPropertyValue("surname", "soap surname" )
testcase.setPropertyValue("number", "1111111111" )
testcase.setPropertyValue("email", "a@g.com")

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="add person" id="ed276166-96de-4334-91c7-0ef05c58094d"><con:settings/><con:config service="http://localhost" resourcePath="/addPerson" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="add person" id="bc31d697-9170-4812-acfb-8a231b07a111" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
	"name" : "${#TestCase#name}",
	"surname": "${#TestCase#surname}",
	"number" : "${#TestCase#number}",
	"email": "${#TestCase#email}"
}</con:request><con:originalUri>http://localhost/addEvent</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="88dcab88-09cc-41af-ab62-a12e7723b2fb" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate add" id="8eb80a9f-b0a1-47ef-b376-d14064331c8f"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	def x = 0
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("name") + "';"
	){row ->
		x = x +1
		log.info("successs")
		testcase.setPropertyValue("id", row.id.toString())
	}

	if(x == 0){
		testRunner.fail("error")
	}
	
	
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="edit event" id="339ee23d-59e4-4079-8492-018705f66ea6"><con:settings/><con:config service="http://localhost" resourcePath="/updatePerson/{id}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="edit event" id="a248e201-a597-4d40-a4a6-5c3c3e07af6c" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request>{
        "surname": "${#TestCase#surnameEdit}"
    }</con:request><con:originalUri>http://localhost/updateEvent</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="8f853d13-5ce0-4f25-b45e-b87ede884749" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate edit" id="0db4d264-17ad-450e-af0d-29e3490e1fd7"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	def x = 0
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("name") + "';"
	){row ->
		x = x +1
		if(testcase.getPropertyValue("surnameEdit") != row.surname.toString()){
			testRunner.fail("Fail")
		}
	}

	if(x == 0){
		testRunner.fail("error")
	}
	//log.info("successs")
	
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="restrequest" name="delete" id="340a618e-ea5d-4959-83ff-5a1a90102cf2"><con:settings/><con:config service="http://localhost" resourcePath="/deletePerson/{id}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="delete" id="78db1554-d94a-4380-beb3-1f43d0a13b20" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#Project#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#baseUrl}</con:endpoint><con:request/><con:originalUri>http://localhost/deleteEvent/1</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ee1ac774-c7d7-4a17-b390-4b1b826d78b4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="${#TestCase#id}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="validate delete" id="81a3fb6e-9172-4d03-9adf-77ce3c49af40"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	def x = 0
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("name") + "';"
	){row ->
		x = x +1
	}

	if(x != 0){
		testRunner.fail("error")
	}

	def responseMessage = testRunner.testCase.testSteps["delete"].testRequest.response.contentAsString
	def json1 = jsonSlurper.parseText(responseMessage)
	log.info(json1.message)

	if(json1.message != "success"){
		testRunner.fail("error")
	}
	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:testStep type="groovy" name="clean" id="367d5e37-53c6-4b4e-bfbd-2a72dd34c21d"><con:settings/><con:config><script>com.eviware.soapui.support.GroovyUtils.registerJdbcDriver( "com.mysql.jdbc.Driver" )
import groovy.sql.Sql
import groovy.json.JsonSlurper
def jsonSlurper = new JsonSlurper()
def project = testRunner.testCase.testSuite.project
def connectionString = project.getPropertyValue( "connectionString" )
def dbUserName = project.getPropertyValue( "dbusername" )
def dbPassword = project.getPropertyValue( "dbpassword" )
def sql = Sql.newInstance(connectionString, dbUserName,dbPassword, "com.mysql.jdbc.Driver");
def testcase = testRunner.testCase
def testSuite = testRunner.testCase.testSuite

try {

	
	sql.execute("use ticketmanagement")

//	log.info("select * from ticket where ticket_number = " + testcase.getPropertyValue("ticketF")  +
//		" and eventid = " + testcase.getPropertyValue("eventID") + 
//		" and personid = " +testcase.getPropertyValue("personID")+ ";" )

	def x = 0
	sql.eachRow("select * from person where name = '" + testcase.getPropertyValue("name") + "';"
	){row ->
		sql.execute("delete from person where eventid = "+testcase.getPropertyValue("id"))
	}

	
}
catch (Throwable thr) {
    log.error("An Error message : "+thr.getClass()+" : "+thr .getMessage())
    testRunner.fail("An Error message : "+thr.getClass()+" : "+thr.getMessage())
}
finally {
    sql.close()
}

return null</script></con:config></con:testStep><con:properties><con:property><con:name>name</con:name><con:value>kNA4I7maCGH</con:value></con:property><con:property><con:name>surname</con:name><con:value>soap surname</con:value></con:property><con:property><con:name>number</con:name><con:value>1111111111</con:value></con:property><con:property><con:name>email</con:name><con:value>a@g.com</con:value></con:property><con:property><con:name>surnameEdit</con:name><con:value>soap edit</con:value></con:property><con:property><con:name>id</con:name><con:value>51</con:value></con:property></con:properties></con:testCase><con:properties/></con:testSuite><con:properties><con:property><con:name>dbDriver</con:name><con:value>com.mysql.jdbc.Driver</con:value></con:property><con:property><con:name>dbusername</con:name><con:value>root</con:value></con:property><con:property><con:name>dbpassword</con:name><con:value>root</con:value></con:property><con:property><con:name>connectionString</con:name><con:value>jdbc:mysql://localhost:3306</con:value></con:property><con:property><con:name>baseUrl</con:name><con:value>http://localhost:8080</con:value></con:property><con:property><con:name>token</con:name><con:value>Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzb2FwYWRtaW4iLCJleHAiOjE1ODc1NjUxNTUsImlhdCI6MTU4NzU2MTU1NX0.1aFp2PsCys_eTJzF9MlAh9R6wzbNsn9bjdGquCfotBSfq3dgsTOq8vFFgp3w2kmJT1zkHdC6FSfjMakD_931LQ</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>